
os.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:
	.global	_start

	.text
_start:
	# park harts with id != 0
	csrr	t0, mhartid		# read current hart id
       0:	f14022f3          	csrr	t0,mhartid
	mv	tp, t0			# keep CPU's hartid in its tp for later usage.
       4:	00028213          	mv	tp,t0
	bnez	t0, park		# if we're not on the hart 0
       8:	02029c63          	bnez	t0,40 <park>
					# we park the hart

	# Set all bytes in the BSS section to zero.
	la	a0, _bss_start
       c:	00002517          	auipc	a0,0x2
      10:	ff850513          	addi	a0,a0,-8 # 2004 <out_buf>
	la	a1, _bss_end
      14:	00005597          	auipc	a1,0x5
      18:	0c458593          	addi	a1,a1,196 # 50d8 <_bss_end>
	bgeu	a0, a1, 2f
      1c:	00b57863          	bgeu	a0,a1,2c <_start+0x2c>
1:
	sw	zero, (a0)
      20:	00052023          	sw	zero,0(a0)
	addi	a0, a0, 4
      24:	00450513          	addi	a0,a0,4
	bltu	a0, a1, 1b
      28:	feb56ce3          	bltu	a0,a1,20 <_start+0x20>
2:
	# Setup stacks, the stack grows from bottom to top, so we put the
	# stack pointer to the very end of the stack range.
	slli	t0, t0, 10		# shift left the hart id by 1024
      2c:	00a29293          	slli	t0,t0,0xa
	la	sp, stacks + STACK_SIZE	# set the initial stack pointer
      30:	00000117          	auipc	sp,0x0
      34:	41810113          	addi	sp,sp,1048 # 448 <STACK_SIZE+0x48>
					# to the end of the first stack space
	add	sp, sp, t0		# move the current hart stack pointer
      38:	00510133          	add	sp,sp,t0
					# to its place in the stack space

	j	start_kernel		# hart 0 jump to c
      3c:	6880006f          	j	6c4 <start_kernel>

00000040 <park>:

park:
	wfi
      40:	10500073          	wfi
	j	park
      44:	ffdff06f          	j	40 <park>

00000048 <stacks>:
	...

00000450 <trap_vector>:
.globl trap_vector
# the trap vector base address must always be aligned on a 4-byte boundary
.align 4
trap_vector:
	# save context(registers).
	csrrw	t6, mscratch, t6	# swap t6 and mscratch
     450:	340f9ff3          	csrrw	t6,mscratch,t6
	reg_save t6
     454:	001fa023          	sw	ra,0(t6)
     458:	002fa223          	sw	sp,4(t6)
     45c:	003fa423          	sw	gp,8(t6)
     460:	004fa623          	sw	tp,12(t6)
     464:	005fa823          	sw	t0,16(t6)
     468:	006faa23          	sw	t1,20(t6)
     46c:	007fac23          	sw	t2,24(t6)
     470:	008fae23          	sw	s0,28(t6)
     474:	029fa023          	sw	s1,32(t6)
     478:	02afa223          	sw	a0,36(t6)
     47c:	02bfa423          	sw	a1,40(t6)
     480:	02cfa623          	sw	a2,44(t6)
     484:	02dfa823          	sw	a3,48(t6)
     488:	02efaa23          	sw	a4,52(t6)
     48c:	02ffac23          	sw	a5,56(t6)
     490:	030fae23          	sw	a6,60(t6)
     494:	051fa023          	sw	a7,64(t6)
     498:	052fa223          	sw	s2,68(t6)
     49c:	053fa423          	sw	s3,72(t6)
     4a0:	054fa623          	sw	s4,76(t6)
     4a4:	055fa823          	sw	s5,80(t6)
     4a8:	056faa23          	sw	s6,84(t6)
     4ac:	057fac23          	sw	s7,88(t6)
     4b0:	058fae23          	sw	s8,92(t6)
     4b4:	079fa023          	sw	s9,96(t6)
     4b8:	07afa223          	sw	s10,100(t6)
     4bc:	07bfa423          	sw	s11,104(t6)
     4c0:	07cfa623          	sw	t3,108(t6)
     4c4:	07dfa823          	sw	t4,112(t6)
     4c8:	07efaa23          	sw	t5,116(t6)

	# Save the actual t6 register, which we swapped into
	# mscratch
	mv	t5, t6		# t5 points to the context of current task
     4cc:	000f8f13          	mv	t5,t6
	csrr	t6, mscratch	# read t6 back from mscratch
     4d0:	34002ff3          	csrr	t6,mscratch
	sw	t6, 120(t5)	# save t6 with t5 as base
     4d4:	07ff2c23          	sw	t6,120(t5)

	# Restore the context pointer into mscratch
	csrw	mscratch, t5
     4d8:	340f1073          	csrw	mscratch,t5

	# call the C trap handler in trap.c
	csrr	a0, mepc
     4dc:	34102573          	csrr	a0,mepc
	csrr	a1, mcause
     4e0:	342025f3          	csrr	a1,mcause
	call	trap_handler
     4e4:	25c010ef          	jal	ra,1740 <trap_handler>

	# trap_handler will return the return address via a0.
	csrw	mepc, a0
     4e8:	34151073          	csrw	mepc,a0
	call print
     4ec:	17d000ef          	jal	ra,e68 <print>

	# restore context(registers).
	csrr	t6, mscratch
     4f0:	34002ff3          	csrr	t6,mscratch
	reg_restore t6
     4f4:	000fa083          	lw	ra,0(t6)
     4f8:	004fa103          	lw	sp,4(t6)
     4fc:	008fa183          	lw	gp,8(t6)
     500:	00cfa203          	lw	tp,12(t6)
     504:	010fa283          	lw	t0,16(t6)
     508:	014fa303          	lw	t1,20(t6)
     50c:	018fa383          	lw	t2,24(t6)
     510:	01cfa403          	lw	s0,28(t6)
     514:	020fa483          	lw	s1,32(t6)
     518:	024fa503          	lw	a0,36(t6)
     51c:	028fa583          	lw	a1,40(t6)
     520:	02cfa603          	lw	a2,44(t6)
     524:	030fa683          	lw	a3,48(t6)
     528:	034fa703          	lw	a4,52(t6)
     52c:	038fa783          	lw	a5,56(t6)
     530:	03cfa803          	lw	a6,60(t6)
     534:	040fa883          	lw	a7,64(t6)
     538:	044fa903          	lw	s2,68(t6)
     53c:	048fa983          	lw	s3,72(t6)
     540:	04cfaa03          	lw	s4,76(t6)
     544:	050faa83          	lw	s5,80(t6)
     548:	054fab03          	lw	s6,84(t6)
     54c:	058fab83          	lw	s7,88(t6)
     550:	05cfac03          	lw	s8,92(t6)
     554:	060fac83          	lw	s9,96(t6)
     558:	064fad03          	lw	s10,100(t6)
     55c:	068fad83          	lw	s11,104(t6)
     560:	06cfae03          	lw	t3,108(t6)
     564:	070fae83          	lw	t4,112(t6)
     568:	074faf03          	lw	t5,116(t6)
     56c:	078faf83          	lw	t6,120(t6)

	# return to whatever we were doing before trap.
	mret
     570:	30200073          	mret
     574:	00000013          	nop
     578:	00000013          	nop
     57c:	00000013          	nop

00000580 <switch_to>:
# void switch_to(struct context *next);
# a0: pointer to the context of the next task
.globl switch_to
.align 4
switch_to:
	csrrw	t6, mscratch, t6	# swap t6 and mscratch
     580:	340f9ff3          	csrrw	t6,mscratch,t6
	beqz	t6, 1f			# Notice: previous task may be NULL
     584:	080f8463          	beqz	t6,60c <switch_to+0x8c>
	reg_save t6			# save context of prev task
     588:	001fa023          	sw	ra,0(t6)
     58c:	002fa223          	sw	sp,4(t6)
     590:	003fa423          	sw	gp,8(t6)
     594:	004fa623          	sw	tp,12(t6)
     598:	005fa823          	sw	t0,16(t6)
     59c:	006faa23          	sw	t1,20(t6)
     5a0:	007fac23          	sw	t2,24(t6)
     5a4:	008fae23          	sw	s0,28(t6)
     5a8:	029fa023          	sw	s1,32(t6)
     5ac:	02afa223          	sw	a0,36(t6)
     5b0:	02bfa423          	sw	a1,40(t6)
     5b4:	02cfa623          	sw	a2,44(t6)
     5b8:	02dfa823          	sw	a3,48(t6)
     5bc:	02efaa23          	sw	a4,52(t6)
     5c0:	02ffac23          	sw	a5,56(t6)
     5c4:	030fae23          	sw	a6,60(t6)
     5c8:	051fa023          	sw	a7,64(t6)
     5cc:	052fa223          	sw	s2,68(t6)
     5d0:	053fa423          	sw	s3,72(t6)
     5d4:	054fa623          	sw	s4,76(t6)
     5d8:	055fa823          	sw	s5,80(t6)
     5dc:	056faa23          	sw	s6,84(t6)
     5e0:	057fac23          	sw	s7,88(t6)
     5e4:	058fae23          	sw	s8,92(t6)
     5e8:	079fa023          	sw	s9,96(t6)
     5ec:	07afa223          	sw	s10,100(t6)
     5f0:	07bfa423          	sw	s11,104(t6)
     5f4:	07cfa623          	sw	t3,108(t6)
     5f8:	07dfa823          	sw	t4,112(t6)
     5fc:	07efaa23          	sw	t5,116(t6)

	# Save the actual t6 register, which we swapped into
	# mscratch
	mv	t5, t6		# t5 points to the context of current task
     600:	000f8f13          	mv	t5,t6
	csrr	t6, mscratch	# read t6 back from mscratch
     604:	34002ff3          	csrr	t6,mscratch
	sw	t6, 120(t5)	# save t6 with t5 as base
     608:	07ff2c23          	sw	t6,120(t5)

1:
	# switch mscratch to point to the context of the next task
	csrw	mscratch, a0
     60c:	34051073          	csrw	mscratch,a0

	# Restore all GP registers
	# Use t6 to point to the context of the new task
	mv	t6, a0
     610:	00050f93          	mv	t6,a0
	reg_restore t6
     614:	000fa083          	lw	ra,0(t6)
     618:	004fa103          	lw	sp,4(t6)
     61c:	008fa183          	lw	gp,8(t6)
     620:	00cfa203          	lw	tp,12(t6)
     624:	010fa283          	lw	t0,16(t6)
     628:	014fa303          	lw	t1,20(t6)
     62c:	018fa383          	lw	t2,24(t6)
     630:	01cfa403          	lw	s0,28(t6)
     634:	020fa483          	lw	s1,32(t6)
     638:	024fa503          	lw	a0,36(t6)
     63c:	028fa583          	lw	a1,40(t6)
     640:	02cfa603          	lw	a2,44(t6)
     644:	030fa683          	lw	a3,48(t6)
     648:	034fa703          	lw	a4,52(t6)
     64c:	038fa783          	lw	a5,56(t6)
     650:	03cfa803          	lw	a6,60(t6)
     654:	040fa883          	lw	a7,64(t6)
     658:	044fa903          	lw	s2,68(t6)
     65c:	048fa983          	lw	s3,72(t6)
     660:	04cfaa03          	lw	s4,76(t6)
     664:	050faa83          	lw	s5,80(t6)
     668:	054fab03          	lw	s6,84(t6)
     66c:	058fab83          	lw	s7,88(t6)
     670:	05cfac03          	lw	s8,92(t6)
     674:	060fac83          	lw	s9,96(t6)
     678:	064fad03          	lw	s10,100(t6)
     67c:	068fad83          	lw	s11,104(t6)
     680:	06cfae03          	lw	t3,108(t6)
     684:	070fae83          	lw	t4,112(t6)
     688:	074faf03          	lw	t5,116(t6)
     68c:	078faf83          	lw	t6,120(t6)

	# Do actual context switching.
	ret
     690:	00008067          	ret
	...

0000069c <w_mepc>:
 * machine exception program counter, holds the
 * instruction address to which a return from
 * exception will go.
 */
static inline void w_mepc(reg_t x)
{
     69c:	fe010113          	addi	sp,sp,-32
     6a0:	00812e23          	sw	s0,28(sp)
     6a4:	02010413          	addi	s0,sp,32
     6a8:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mepc, %0" : : "r" (x));
     6ac:	fec42783          	lw	a5,-20(s0)
     6b0:	34179073          	csrw	mepc,a5
}
     6b4:	00000013          	nop
     6b8:	01c12403          	lw	s0,28(sp)
     6bc:	02010113          	addi	sp,sp,32
     6c0:	00008067          	ret

000006c4 <start_kernel>:
extern void trap_init(void);
extern void plic_init(void);
extern void timer_init(void);

void start_kernel(void)
{
     6c4:	ff010113          	addi	sp,sp,-16
     6c8:	00112623          	sw	ra,12(sp)
     6cc:	00812423          	sw	s0,8(sp)
     6d0:	01010413          	addi	s0,sp,16
	uart_init();
     6d4:	048000ef          	jal	ra,71c <uart_init>
	uart_puts("Hello, RVOS!\n");
     6d8:	000027b7          	lui	a5,0x2
     6dc:	b8478513          	addi	a0,a5,-1148 # 1b84 <BSS_END+0x4>
     6e0:	094000ef          	jal	ra,774 <uart_puts>

	w_mepc(0x1234);
     6e4:	000017b7          	lui	a5,0x1
     6e8:	23478513          	addi	a0,a5,564 # 1234 <page_alloc+0xc4>
     6ec:	fb1ff0ef          	jal	ra,69c <w_mepc>
	page_init();
     6f0:	0dd000ef          	jal	ra,fcc <page_init>

	trap_init();
     6f4:	01c010ef          	jal	ra,1710 <trap_init>

	timer_init();
     6f8:	3b0010ef          	jal	ra,1aa8 <timer_init>

	sched_init();
     6fc:	53d000ef          	jal	ra,1438 <sched_init>

	os_main();
     700:	785000ef          	jal	ra,1684 <os_main>

	schedule();
     704:	561000ef          	jal	ra,1464 <schedule>

	uart_puts("Would not go here!\n");
     708:	000027b7          	lui	a5,0x2
     70c:	b9478513          	addi	a0,a5,-1132 # 1b94 <BSS_END+0x14>
     710:	064000ef          	jal	ra,774 <uart_puts>
	while (1) {}; // stop here!
     714:	00000013          	nop
     718:	ffdff06f          	j	714 <start_kernel+0x50>

0000071c <uart_init>:
#include "os.h"

void uart_init()
{
     71c:	ff010113          	addi	sp,sp,-16
     720:	00812623          	sw	s0,12(sp)
     724:	01010413          	addi	s0,sp,16

}
     728:	00000013          	nop
     72c:	00c12403          	lw	s0,12(sp)
     730:	01010113          	addi	sp,sp,16
     734:	00008067          	ret

00000738 <uart_putc>:

int uart_putc(char ch)
{
     738:	fe010113          	addi	sp,sp,-32
     73c:	00112e23          	sw	ra,28(sp)
     740:	00812c23          	sw	s0,24(sp)
     744:	02010413          	addi	s0,sp,32
     748:	00050793          	mv	a5,a0
     74c:	fef407a3          	sb	a5,-17(s0)
	put_char(ch);
     750:	fef44783          	lbu	a5,-17(s0)
     754:	00078513          	mv	a0,a5
     758:	04c000ef          	jal	ra,7a4 <put_char>
	return ch;
     75c:	fef44783          	lbu	a5,-17(s0)
}
     760:	00078513          	mv	a0,a5
     764:	01c12083          	lw	ra,28(sp)
     768:	01812403          	lw	s0,24(sp)
     76c:	02010113          	addi	sp,sp,32
     770:	00008067          	ret

00000774 <uart_puts>:

void uart_puts(char *s)
{
     774:	fe010113          	addi	sp,sp,-32
     778:	00112e23          	sw	ra,28(sp)
     77c:	00812c23          	sw	s0,24(sp)
     780:	02010413          	addi	s0,sp,32
     784:	fea42623          	sw	a0,-20(s0)
	put_str(s);
     788:	fec42503          	lw	a0,-20(s0)
     78c:	04c000ef          	jal	ra,7d8 <put_str>
}
     790:	00000013          	nop
     794:	01c12083          	lw	ra,28(sp)
     798:	01812403          	lw	s0,24(sp)
     79c:	02010113          	addi	sp,sp,32
     7a0:	00008067          	ret

000007a4 <put_char>:

/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/
void put_char(char c) 
{
     7a4:	fe010113          	addi	sp,sp,-32
     7a8:	00812e23          	sw	s0,28(sp)
     7ac:	02010413          	addi	s0,sp,32
     7b0:	00050793          	mv	a5,a0
     7b4:	fef407a3          	sb	a5,-17(s0)
  DEV_WRITE(CTRL_BASE + CTRL_OUT, (unsigned char)c);
     7b8:	002007b7          	lui	a5,0x200
     7bc:	00478793          	addi	a5,a5,4 # 200004 <_memory_end+0x4>
     7c0:	fef44703          	lbu	a4,-17(s0)
     7c4:	00e7a023          	sw	a4,0(a5)
}
     7c8:	00000013          	nop
     7cc:	01c12403          	lw	s0,28(sp)
     7d0:	02010113          	addi	sp,sp,32
     7d4:	00008067          	ret

000007d8 <put_str>:

void put_str(const char *str) 
{
     7d8:	fe010113          	addi	sp,sp,-32
     7dc:	00112e23          	sw	ra,28(sp)
     7e0:	00812c23          	sw	s0,24(sp)
     7e4:	02010413          	addi	s0,sp,32
     7e8:	fea42623          	sw	a0,-20(s0)
  while (*str) 
     7ec:	01c0006f          	j	808 <put_str+0x30>
  {
    put_char(*str++);
     7f0:	fec42783          	lw	a5,-20(s0)
     7f4:	00178713          	addi	a4,a5,1
     7f8:	fee42623          	sw	a4,-20(s0)
     7fc:	0007c783          	lbu	a5,0(a5)
     800:	00078513          	mv	a0,a5
     804:	fa1ff0ef          	jal	ra,7a4 <put_char>
  while (*str) 
     808:	fec42783          	lw	a5,-20(s0)
     80c:	0007c783          	lbu	a5,0(a5)
     810:	fe0790e3          	bnez	a5,7f0 <put_str+0x18>
  }
}
     814:	00000013          	nop
     818:	00000013          	nop
     81c:	01c12083          	lw	ra,28(sp)
     820:	01812403          	lw	s0,24(sp)
     824:	02010113          	addi	sp,sp,32
     828:	00008067          	ret

0000082c <halt>:

void halt() 
{ 
     82c:	ff010113          	addi	sp,sp,-16
     830:	00812623          	sw	s0,12(sp)
     834:	01010413          	addi	s0,sp,16
  DEV_WRITE(CTRL_BASE + CTRL_CTRL, 1); 
     838:	002007b7          	lui	a5,0x200
     83c:	00878793          	addi	a5,a5,8 # 200008 <_memory_end+0x8>
     840:	00100713          	li	a4,1
     844:	00e7a023          	sw	a4,0(a5)
     848:	00000013          	nop
     84c:	00c12403          	lw	s0,12(sp)
     850:	01010113          	addi	sp,sp,16
     854:	00008067          	ret

00000858 <r_mepc>:

static inline reg_t r_mepc()
{
     858:	fe010113          	addi	sp,sp,-32
     85c:	00812e23          	sw	s0,28(sp)
     860:	02010413          	addi	s0,sp,32
	reg_t x;
	asm volatile("csrr %0, mepc" : "=r" (x));
     864:	341027f3          	csrr	a5,mepc
     868:	fef42623          	sw	a5,-20(s0)
	return x;
     86c:	fec42783          	lw	a5,-20(s0)
}
     870:	00078513          	mv	a0,a5
     874:	01c12403          	lw	s0,28(sp)
     878:	02010113          	addi	sp,sp,32
     87c:	00008067          	ret

00000880 <_vsnprintf>:
/*
 * ref: https://github.com/cccriscv/mini-riscv-os/blob/master/05-Preemptive/lib.c
 */

static int _vsnprintf(char * out, size_t n, const char* s, va_list vl)
{
     880:	fb010113          	addi	sp,sp,-80
     884:	04812623          	sw	s0,76(sp)
     888:	05010413          	addi	s0,sp,80
     88c:	faa42e23          	sw	a0,-68(s0)
     890:	fab42c23          	sw	a1,-72(s0)
     894:	fac42a23          	sw	a2,-76(s0)
     898:	fad42823          	sw	a3,-80(s0)
	int format = 0;
     89c:	fe042623          	sw	zero,-20(s0)
	int longarg = 0;
     8a0:	fe042423          	sw	zero,-24(s0)
	size_t pos = 0;
     8a4:	fe042223          	sw	zero,-28(s0)
	for (; *s; s++) {
     8a8:	4080006f          	j	cb0 <_vsnprintf+0x430>
		if (format) {
     8ac:	fec42783          	lw	a5,-20(s0)
     8b0:	38078c63          	beqz	a5,c48 <_vsnprintf+0x3c8>
			switch(*s) {
     8b4:	fb442783          	lw	a5,-76(s0)
     8b8:	0007c783          	lbu	a5,0(a5)
     8bc:	f9d78793          	addi	a5,a5,-99
     8c0:	01500713          	li	a4,21
     8c4:	3cf76e63          	bltu	a4,a5,ca0 <_vsnprintf+0x420>
     8c8:	00279713          	slli	a4,a5,0x2
     8cc:	000027b7          	lui	a5,0x2
     8d0:	ba878793          	addi	a5,a5,-1112 # 1ba8 <BSS_END+0x28>
     8d4:	00f707b3          	add	a5,a4,a5
     8d8:	0007a783          	lw	a5,0(a5)
     8dc:	00078067          	jr	a5
			case 'l': {
				longarg = 1;
     8e0:	00100793          	li	a5,1
     8e4:	fef42423          	sw	a5,-24(s0)
				break;
     8e8:	3bc0006f          	j	ca4 <_vsnprintf+0x424>
			}
			case 'p': {
				longarg = 1;
     8ec:	00100793          	li	a5,1
     8f0:	fef42423          	sw	a5,-24(s0)
				if (out && pos < n) {
     8f4:	fbc42783          	lw	a5,-68(s0)
     8f8:	02078263          	beqz	a5,91c <_vsnprintf+0x9c>
     8fc:	fe442703          	lw	a4,-28(s0)
     900:	fb842783          	lw	a5,-72(s0)
     904:	00f77c63          	bgeu	a4,a5,91c <_vsnprintf+0x9c>
					out[pos] = '0';
     908:	fbc42703          	lw	a4,-68(s0)
     90c:	fe442783          	lw	a5,-28(s0)
     910:	00f707b3          	add	a5,a4,a5
     914:	03000713          	li	a4,48
     918:	00e78023          	sb	a4,0(a5)
				}
				pos++;
     91c:	fe442783          	lw	a5,-28(s0)
     920:	00178793          	addi	a5,a5,1
     924:	fef42223          	sw	a5,-28(s0)
				if (out && pos < n) {
     928:	fbc42783          	lw	a5,-68(s0)
     92c:	02078263          	beqz	a5,950 <_vsnprintf+0xd0>
     930:	fe442703          	lw	a4,-28(s0)
     934:	fb842783          	lw	a5,-72(s0)
     938:	00f77c63          	bgeu	a4,a5,950 <_vsnprintf+0xd0>
					out[pos] = 'x';
     93c:	fbc42703          	lw	a4,-68(s0)
     940:	fe442783          	lw	a5,-28(s0)
     944:	00f707b3          	add	a5,a4,a5
     948:	07800713          	li	a4,120
     94c:	00e78023          	sb	a4,0(a5)
				}
				pos++;
     950:	fe442783          	lw	a5,-28(s0)
     954:	00178793          	addi	a5,a5,1
     958:	fef42223          	sw	a5,-28(s0)
			}
			case 'x': {
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     95c:	fe842783          	lw	a5,-24(s0)
     960:	00078c63          	beqz	a5,978 <_vsnprintf+0xf8>
     964:	fb042783          	lw	a5,-80(s0)
     968:	00478713          	addi	a4,a5,4
     96c:	fae42823          	sw	a4,-80(s0)
     970:	0007a783          	lw	a5,0(a5)
     974:	0140006f          	j	988 <_vsnprintf+0x108>
     978:	fb042783          	lw	a5,-80(s0)
     97c:	00478713          	addi	a4,a5,4
     980:	fae42823          	sw	a4,-80(s0)
     984:	0007a783          	lw	a5,0(a5)
     988:	fcf42423          	sw	a5,-56(s0)
				int hexdigits = 2*(longarg ? sizeof(long) : sizeof(int))-1;
     98c:	00700793          	li	a5,7
     990:	fcf42223          	sw	a5,-60(s0)
				for(int i = hexdigits; i >= 0; i--) {
     994:	fc442783          	lw	a5,-60(s0)
     998:	fef42023          	sw	a5,-32(s0)
     99c:	0880006f          	j	a24 <_vsnprintf+0x1a4>
					int d = (num >> (4*i)) & 0xF;
     9a0:	fe042783          	lw	a5,-32(s0)
     9a4:	00279793          	slli	a5,a5,0x2
     9a8:	fc842703          	lw	a4,-56(s0)
     9ac:	40f757b3          	sra	a5,a4,a5
     9b0:	00f7f793          	andi	a5,a5,15
     9b4:	fcf42023          	sw	a5,-64(s0)
					if (out && pos < n) {
     9b8:	fbc42783          	lw	a5,-68(s0)
     9bc:	04078863          	beqz	a5,a0c <_vsnprintf+0x18c>
     9c0:	fe442703          	lw	a4,-28(s0)
     9c4:	fb842783          	lw	a5,-72(s0)
     9c8:	04f77263          	bgeu	a4,a5,a0c <_vsnprintf+0x18c>
						out[pos] = (d < 10 ? '0'+d : 'a'+d-10);
     9cc:	fc042703          	lw	a4,-64(s0)
     9d0:	00900793          	li	a5,9
     9d4:	00e7cc63          	blt	a5,a4,9ec <_vsnprintf+0x16c>
     9d8:	fc042783          	lw	a5,-64(s0)
     9dc:	0ff7f793          	zext.b	a5,a5
     9e0:	03078793          	addi	a5,a5,48
     9e4:	0ff7f793          	zext.b	a5,a5
     9e8:	0140006f          	j	9fc <_vsnprintf+0x17c>
     9ec:	fc042783          	lw	a5,-64(s0)
     9f0:	0ff7f793          	zext.b	a5,a5
     9f4:	05778793          	addi	a5,a5,87
     9f8:	0ff7f793          	zext.b	a5,a5
     9fc:	fbc42683          	lw	a3,-68(s0)
     a00:	fe442703          	lw	a4,-28(s0)
     a04:	00e68733          	add	a4,a3,a4
     a08:	00f70023          	sb	a5,0(a4)
					}
					pos++;
     a0c:	fe442783          	lw	a5,-28(s0)
     a10:	00178793          	addi	a5,a5,1
     a14:	fef42223          	sw	a5,-28(s0)
				for(int i = hexdigits; i >= 0; i--) {
     a18:	fe042783          	lw	a5,-32(s0)
     a1c:	fff78793          	addi	a5,a5,-1
     a20:	fef42023          	sw	a5,-32(s0)
     a24:	fe042783          	lw	a5,-32(s0)
     a28:	f607dce3          	bgez	a5,9a0 <_vsnprintf+0x120>
				}
				longarg = 0;
     a2c:	fe042423          	sw	zero,-24(s0)
				format = 0;
     a30:	fe042623          	sw	zero,-20(s0)
				break;
     a34:	2700006f          	j	ca4 <_vsnprintf+0x424>
			}
			case 'd': {
				long num = longarg ? va_arg(vl, long) : va_arg(vl, int);
     a38:	fe842783          	lw	a5,-24(s0)
     a3c:	00078c63          	beqz	a5,a54 <_vsnprintf+0x1d4>
     a40:	fb042783          	lw	a5,-80(s0)
     a44:	00478713          	addi	a4,a5,4
     a48:	fae42823          	sw	a4,-80(s0)
     a4c:	0007a783          	lw	a5,0(a5)
     a50:	0140006f          	j	a64 <_vsnprintf+0x1e4>
     a54:	fb042783          	lw	a5,-80(s0)
     a58:	00478713          	addi	a4,a5,4
     a5c:	fae42823          	sw	a4,-80(s0)
     a60:	0007a783          	lw	a5,0(a5)
     a64:	fcf42e23          	sw	a5,-36(s0)
				if (num < 0) {
     a68:	fdc42783          	lw	a5,-36(s0)
     a6c:	0407d263          	bgez	a5,ab0 <_vsnprintf+0x230>
					num = -num;
     a70:	fdc42783          	lw	a5,-36(s0)
     a74:	40f007b3          	neg	a5,a5
     a78:	fcf42e23          	sw	a5,-36(s0)
					if (out && pos < n) {
     a7c:	fbc42783          	lw	a5,-68(s0)
     a80:	02078263          	beqz	a5,aa4 <_vsnprintf+0x224>
     a84:	fe442703          	lw	a4,-28(s0)
     a88:	fb842783          	lw	a5,-72(s0)
     a8c:	00f77c63          	bgeu	a4,a5,aa4 <_vsnprintf+0x224>
						out[pos] = '-';
     a90:	fbc42703          	lw	a4,-68(s0)
     a94:	fe442783          	lw	a5,-28(s0)
     a98:	00f707b3          	add	a5,a4,a5
     a9c:	02d00713          	li	a4,45
     aa0:	00e78023          	sb	a4,0(a5)
					}
					pos++;
     aa4:	fe442783          	lw	a5,-28(s0)
     aa8:	00178793          	addi	a5,a5,1
     aac:	fef42223          	sw	a5,-28(s0)
				}
				long digits = 1;
     ab0:	00100793          	li	a5,1
     ab4:	fcf42c23          	sw	a5,-40(s0)
				for (long nn = num; nn /= 10; digits++);
     ab8:	fdc42783          	lw	a5,-36(s0)
     abc:	fcf42a23          	sw	a5,-44(s0)
     ac0:	0100006f          	j	ad0 <_vsnprintf+0x250>
     ac4:	fd842783          	lw	a5,-40(s0)
     ac8:	00178793          	addi	a5,a5,1
     acc:	fcf42c23          	sw	a5,-40(s0)
     ad0:	fd442703          	lw	a4,-44(s0)
     ad4:	00a00793          	li	a5,10
     ad8:	02f747b3          	div	a5,a4,a5
     adc:	fcf42a23          	sw	a5,-44(s0)
     ae0:	fd442783          	lw	a5,-44(s0)
     ae4:	fe0790e3          	bnez	a5,ac4 <_vsnprintf+0x244>
				for (int i = digits-1; i >= 0; i--) {
     ae8:	fd842783          	lw	a5,-40(s0)
     aec:	fff78793          	addi	a5,a5,-1
     af0:	fcf42823          	sw	a5,-48(s0)
     af4:	06c0006f          	j	b60 <_vsnprintf+0x2e0>
					if (out && pos + i < n) {
     af8:	fbc42783          	lw	a5,-68(s0)
     afc:	04078463          	beqz	a5,b44 <_vsnprintf+0x2c4>
     b00:	fd042703          	lw	a4,-48(s0)
     b04:	fe442783          	lw	a5,-28(s0)
     b08:	00f707b3          	add	a5,a4,a5
     b0c:	fb842703          	lw	a4,-72(s0)
     b10:	02e7fa63          	bgeu	a5,a4,b44 <_vsnprintf+0x2c4>
						out[pos + i] = '0' + (num % 10);
     b14:	fdc42703          	lw	a4,-36(s0)
     b18:	00a00793          	li	a5,10
     b1c:	02f767b3          	rem	a5,a4,a5
     b20:	0ff7f713          	zext.b	a4,a5
     b24:	fd042683          	lw	a3,-48(s0)
     b28:	fe442783          	lw	a5,-28(s0)
     b2c:	00f687b3          	add	a5,a3,a5
     b30:	fbc42683          	lw	a3,-68(s0)
     b34:	00f687b3          	add	a5,a3,a5
     b38:	03070713          	addi	a4,a4,48
     b3c:	0ff77713          	zext.b	a4,a4
     b40:	00e78023          	sb	a4,0(a5)
					}
					num /= 10;
     b44:	fdc42703          	lw	a4,-36(s0)
     b48:	00a00793          	li	a5,10
     b4c:	02f747b3          	div	a5,a4,a5
     b50:	fcf42e23          	sw	a5,-36(s0)
				for (int i = digits-1; i >= 0; i--) {
     b54:	fd042783          	lw	a5,-48(s0)
     b58:	fff78793          	addi	a5,a5,-1
     b5c:	fcf42823          	sw	a5,-48(s0)
     b60:	fd042783          	lw	a5,-48(s0)
     b64:	f807dae3          	bgez	a5,af8 <_vsnprintf+0x278>
				}
				pos += digits;
     b68:	fd842783          	lw	a5,-40(s0)
     b6c:	fe442703          	lw	a4,-28(s0)
     b70:	00f707b3          	add	a5,a4,a5
     b74:	fef42223          	sw	a5,-28(s0)
				longarg = 0;
     b78:	fe042423          	sw	zero,-24(s0)
				format = 0;
     b7c:	fe042623          	sw	zero,-20(s0)
				break;
     b80:	1240006f          	j	ca4 <_vsnprintf+0x424>
			}
			case 's': {
				const char* s2 = va_arg(vl, const char*);
     b84:	fb042783          	lw	a5,-80(s0)
     b88:	00478713          	addi	a4,a5,4
     b8c:	fae42823          	sw	a4,-80(s0)
     b90:	0007a783          	lw	a5,0(a5)
     b94:	fcf42623          	sw	a5,-52(s0)
				while (*s2) {
     b98:	0480006f          	j	be0 <_vsnprintf+0x360>
					if (out && pos < n) {
     b9c:	fbc42783          	lw	a5,-68(s0)
     ba0:	02078463          	beqz	a5,bc8 <_vsnprintf+0x348>
     ba4:	fe442703          	lw	a4,-28(s0)
     ba8:	fb842783          	lw	a5,-72(s0)
     bac:	00f77e63          	bgeu	a4,a5,bc8 <_vsnprintf+0x348>
						out[pos] = *s2;
     bb0:	fbc42703          	lw	a4,-68(s0)
     bb4:	fe442783          	lw	a5,-28(s0)
     bb8:	00f707b3          	add	a5,a4,a5
     bbc:	fcc42703          	lw	a4,-52(s0)
     bc0:	00074703          	lbu	a4,0(a4)
     bc4:	00e78023          	sb	a4,0(a5)
					}
					pos++;
     bc8:	fe442783          	lw	a5,-28(s0)
     bcc:	00178793          	addi	a5,a5,1
     bd0:	fef42223          	sw	a5,-28(s0)
					s2++;
     bd4:	fcc42783          	lw	a5,-52(s0)
     bd8:	00178793          	addi	a5,a5,1
     bdc:	fcf42623          	sw	a5,-52(s0)
				while (*s2) {
     be0:	fcc42783          	lw	a5,-52(s0)
     be4:	0007c783          	lbu	a5,0(a5)
     be8:	fa079ae3          	bnez	a5,b9c <_vsnprintf+0x31c>
				}
				longarg = 0;
     bec:	fe042423          	sw	zero,-24(s0)
				format = 0;
     bf0:	fe042623          	sw	zero,-20(s0)
				break;
     bf4:	0b00006f          	j	ca4 <_vsnprintf+0x424>
			}
			case 'c': {
				if (out && pos < n) {
     bf8:	fbc42783          	lw	a5,-68(s0)
     bfc:	02078a63          	beqz	a5,c30 <_vsnprintf+0x3b0>
     c00:	fe442703          	lw	a4,-28(s0)
     c04:	fb842783          	lw	a5,-72(s0)
     c08:	02f77463          	bgeu	a4,a5,c30 <_vsnprintf+0x3b0>
					out[pos] = (char)va_arg(vl,int);
     c0c:	fb042783          	lw	a5,-80(s0)
     c10:	00478713          	addi	a4,a5,4
     c14:	fae42823          	sw	a4,-80(s0)
     c18:	0007a683          	lw	a3,0(a5)
     c1c:	fbc42703          	lw	a4,-68(s0)
     c20:	fe442783          	lw	a5,-28(s0)
     c24:	00f707b3          	add	a5,a4,a5
     c28:	0ff6f713          	zext.b	a4,a3
     c2c:	00e78023          	sb	a4,0(a5)
				}
				pos++;
     c30:	fe442783          	lw	a5,-28(s0)
     c34:	00178793          	addi	a5,a5,1
     c38:	fef42223          	sw	a5,-28(s0)
				longarg = 0;
     c3c:	fe042423          	sw	zero,-24(s0)
				format = 0;
     c40:	fe042623          	sw	zero,-20(s0)
				break;
     c44:	0600006f          	j	ca4 <_vsnprintf+0x424>
			}
			default:
				break;
			}
		} else if (*s == '%') {
     c48:	fb442783          	lw	a5,-76(s0)
     c4c:	0007c703          	lbu	a4,0(a5)
     c50:	02500793          	li	a5,37
     c54:	00f71863          	bne	a4,a5,c64 <_vsnprintf+0x3e4>
			format = 1;
     c58:	00100793          	li	a5,1
     c5c:	fef42623          	sw	a5,-20(s0)
     c60:	0440006f          	j	ca4 <_vsnprintf+0x424>
		} else {
			if (out && pos < n) {
     c64:	fbc42783          	lw	a5,-68(s0)
     c68:	02078463          	beqz	a5,c90 <_vsnprintf+0x410>
     c6c:	fe442703          	lw	a4,-28(s0)
     c70:	fb842783          	lw	a5,-72(s0)
     c74:	00f77e63          	bgeu	a4,a5,c90 <_vsnprintf+0x410>
				out[pos] = *s;
     c78:	fbc42703          	lw	a4,-68(s0)
     c7c:	fe442783          	lw	a5,-28(s0)
     c80:	00f707b3          	add	a5,a4,a5
     c84:	fb442703          	lw	a4,-76(s0)
     c88:	00074703          	lbu	a4,0(a4)
     c8c:	00e78023          	sb	a4,0(a5)
			}
			pos++;
     c90:	fe442783          	lw	a5,-28(s0)
     c94:	00178793          	addi	a5,a5,1
     c98:	fef42223          	sw	a5,-28(s0)
     c9c:	0080006f          	j	ca4 <_vsnprintf+0x424>
				break;
     ca0:	00000013          	nop
	for (; *s; s++) {
     ca4:	fb442783          	lw	a5,-76(s0)
     ca8:	00178793          	addi	a5,a5,1
     cac:	faf42a23          	sw	a5,-76(s0)
     cb0:	fb442783          	lw	a5,-76(s0)
     cb4:	0007c783          	lbu	a5,0(a5)
     cb8:	be079ae3          	bnez	a5,8ac <_vsnprintf+0x2c>
		}
    	}
	if (out && pos < n) {
     cbc:	fbc42783          	lw	a5,-68(s0)
     cc0:	02078263          	beqz	a5,ce4 <_vsnprintf+0x464>
     cc4:	fe442703          	lw	a4,-28(s0)
     cc8:	fb842783          	lw	a5,-72(s0)
     ccc:	00f77c63          	bgeu	a4,a5,ce4 <_vsnprintf+0x464>
		out[pos] = 0;
     cd0:	fbc42703          	lw	a4,-68(s0)
     cd4:	fe442783          	lw	a5,-28(s0)
     cd8:	00f707b3          	add	a5,a4,a5
     cdc:	00078023          	sb	zero,0(a5)
     ce0:	0280006f          	j	d08 <_vsnprintf+0x488>
	} else if (out && n) {
     ce4:	fbc42783          	lw	a5,-68(s0)
     ce8:	02078063          	beqz	a5,d08 <_vsnprintf+0x488>
     cec:	fb842783          	lw	a5,-72(s0)
     cf0:	00078c63          	beqz	a5,d08 <_vsnprintf+0x488>
		out[n-1] = 0;
     cf4:	fb842783          	lw	a5,-72(s0)
     cf8:	fff78793          	addi	a5,a5,-1
     cfc:	fbc42703          	lw	a4,-68(s0)
     d00:	00f707b3          	add	a5,a4,a5
     d04:	00078023          	sb	zero,0(a5)
	}
	return pos;
     d08:	fe442783          	lw	a5,-28(s0)
}
     d0c:	00078513          	mv	a0,a5
     d10:	04c12403          	lw	s0,76(sp)
     d14:	05010113          	addi	sp,sp,80
     d18:	00008067          	ret

00000d1c <_vprintf>:

static char out_buf[1000]; // buffer for _vprintf()

static int _vprintf(const char* s, va_list vl)
{
     d1c:	fd010113          	addi	sp,sp,-48
     d20:	02112623          	sw	ra,44(sp)
     d24:	02812423          	sw	s0,40(sp)
     d28:	03010413          	addi	s0,sp,48
     d2c:	fca42e23          	sw	a0,-36(s0)
     d30:	fcb42c23          	sw	a1,-40(s0)
	int res = _vsnprintf(NULL, -1, s, vl);
     d34:	fd842683          	lw	a3,-40(s0)
     d38:	fdc42603          	lw	a2,-36(s0)
     d3c:	fff00593          	li	a1,-1
     d40:	00000513          	li	a0,0
     d44:	b3dff0ef          	jal	ra,880 <_vsnprintf>
     d48:	fea42623          	sw	a0,-20(s0)
	if (res+1 >= sizeof(out_buf)) {
     d4c:	fec42783          	lw	a5,-20(s0)
     d50:	00178793          	addi	a5,a5,1
     d54:	00078713          	mv	a4,a5
     d58:	3e700793          	li	a5,999
     d5c:	00e7fc63          	bgeu	a5,a4,d74 <_vprintf+0x58>
		uart_puts("error: output string size overflow\n");
     d60:	000027b7          	lui	a5,0x2
     d64:	c0078513          	addi	a0,a5,-1024 # 1c00 <BSS_END+0x80>
     d68:	a0dff0ef          	jal	ra,774 <uart_puts>
		while(1) {}
     d6c:	00000013          	nop
     d70:	ffdff06f          	j	d6c <_vprintf+0x50>
	}
	_vsnprintf(out_buf, res + 1, s, vl);
     d74:	fec42783          	lw	a5,-20(s0)
     d78:	00178793          	addi	a5,a5,1
     d7c:	fd842683          	lw	a3,-40(s0)
     d80:	fdc42603          	lw	a2,-36(s0)
     d84:	00078593          	mv	a1,a5
     d88:	000027b7          	lui	a5,0x2
     d8c:	00478513          	addi	a0,a5,4 # 2004 <out_buf>
     d90:	af1ff0ef          	jal	ra,880 <_vsnprintf>
	uart_puts(out_buf);
     d94:	000027b7          	lui	a5,0x2
     d98:	00478513          	addi	a0,a5,4 # 2004 <out_buf>
     d9c:	9d9ff0ef          	jal	ra,774 <uart_puts>
	return res;
     da0:	fec42783          	lw	a5,-20(s0)
}
     da4:	00078513          	mv	a0,a5
     da8:	02c12083          	lw	ra,44(sp)
     dac:	02812403          	lw	s0,40(sp)
     db0:	03010113          	addi	sp,sp,48
     db4:	00008067          	ret

00000db8 <printf>:

int printf(const char* s, ...)
{
     db8:	fb010113          	addi	sp,sp,-80
     dbc:	02112623          	sw	ra,44(sp)
     dc0:	02812423          	sw	s0,40(sp)
     dc4:	03010413          	addi	s0,sp,48
     dc8:	fca42e23          	sw	a0,-36(s0)
     dcc:	00b42223          	sw	a1,4(s0)
     dd0:	00c42423          	sw	a2,8(s0)
     dd4:	00d42623          	sw	a3,12(s0)
     dd8:	00e42823          	sw	a4,16(s0)
     ddc:	00f42a23          	sw	a5,20(s0)
     de0:	01042c23          	sw	a6,24(s0)
     de4:	01142e23          	sw	a7,28(s0)
	int res = 0;
     de8:	fe042623          	sw	zero,-20(s0)
	va_list vl;
	va_start(vl, s);
     dec:	02040793          	addi	a5,s0,32
     df0:	fcf42c23          	sw	a5,-40(s0)
     df4:	fd842783          	lw	a5,-40(s0)
     df8:	fe478793          	addi	a5,a5,-28
     dfc:	fef42423          	sw	a5,-24(s0)
	res = _vprintf(s, vl);
     e00:	fe842783          	lw	a5,-24(s0)
     e04:	00078593          	mv	a1,a5
     e08:	fdc42503          	lw	a0,-36(s0)
     e0c:	f11ff0ef          	jal	ra,d1c <_vprintf>
     e10:	fea42623          	sw	a0,-20(s0)
	va_end(vl);
	return res;
     e14:	fec42783          	lw	a5,-20(s0)
}
     e18:	00078513          	mv	a0,a5
     e1c:	02c12083          	lw	ra,44(sp)
     e20:	02812403          	lw	s0,40(sp)
     e24:	05010113          	addi	sp,sp,80
     e28:	00008067          	ret

00000e2c <panic>:

void panic(char *s)
{
     e2c:	fe010113          	addi	sp,sp,-32
     e30:	00112e23          	sw	ra,28(sp)
     e34:	00812c23          	sw	s0,24(sp)
     e38:	02010413          	addi	s0,sp,32
     e3c:	fea42623          	sw	a0,-20(s0)
	printf("panic: ");
     e40:	000027b7          	lui	a5,0x2
     e44:	c2478513          	addi	a0,a5,-988 # 1c24 <BSS_END+0xa4>
     e48:	f71ff0ef          	jal	ra,db8 <printf>
	printf(s);
     e4c:	fec42503          	lw	a0,-20(s0)
     e50:	f69ff0ef          	jal	ra,db8 <printf>
	printf("\n");
     e54:	000027b7          	lui	a5,0x2
     e58:	c2c78513          	addi	a0,a5,-980 # 1c2c <BSS_END+0xac>
     e5c:	f5dff0ef          	jal	ra,db8 <printf>
	while(1){};
     e60:	00000013          	nop
     e64:	ffdff06f          	j	e60 <panic+0x34>

00000e68 <print>:
}

void print()
{
     e68:	fe010113          	addi	sp,sp,-32
     e6c:	00112e23          	sw	ra,28(sp)
     e70:	00812c23          	sw	s0,24(sp)
     e74:	02010413          	addi	s0,sp,32
	reg_t x=r_mepc();
     e78:	9e1ff0ef          	jal	ra,858 <r_mepc>
     e7c:	fea42623          	sw	a0,-20(s0)
	printf("%08x\n",x);
     e80:	fec42583          	lw	a1,-20(s0)
     e84:	000027b7          	lui	a5,0x2
     e88:	c3078513          	addi	a0,a5,-976 # 1c30 <BSS_END+0xb0>
     e8c:	f2dff0ef          	jal	ra,db8 <printf>
     e90:	00000013          	nop
     e94:	01c12083          	lw	ra,28(sp)
     e98:	01812403          	lw	s0,24(sp)
     e9c:	02010113          	addi	sp,sp,32
     ea0:	00008067          	ret

00000ea4 <_clear>:
struct Page {
	uint8_t flags;
};

static inline void _clear(struct Page *page)
{
     ea4:	fe010113          	addi	sp,sp,-32
     ea8:	00812e23          	sw	s0,28(sp)
     eac:	02010413          	addi	s0,sp,32
     eb0:	fea42623          	sw	a0,-20(s0)
	page->flags = 0;
     eb4:	fec42783          	lw	a5,-20(s0)
     eb8:	00078023          	sb	zero,0(a5)
}
     ebc:	00000013          	nop
     ec0:	01c12403          	lw	s0,28(sp)
     ec4:	02010113          	addi	sp,sp,32
     ec8:	00008067          	ret

00000ecc <_is_free>:

static inline int _is_free(struct Page *page)
{
     ecc:	fe010113          	addi	sp,sp,-32
     ed0:	00812e23          	sw	s0,28(sp)
     ed4:	02010413          	addi	s0,sp,32
     ed8:	fea42623          	sw	a0,-20(s0)
	if (page->flags & PAGE_TAKEN) {
     edc:	fec42783          	lw	a5,-20(s0)
     ee0:	0007c783          	lbu	a5,0(a5)
     ee4:	0017f793          	andi	a5,a5,1
     ee8:	00078663          	beqz	a5,ef4 <_is_free+0x28>
		return 0;
     eec:	00000793          	li	a5,0
     ef0:	0080006f          	j	ef8 <_is_free+0x2c>
	} else {
		return 1;
     ef4:	00100793          	li	a5,1
	}
}
     ef8:	00078513          	mv	a0,a5
     efc:	01c12403          	lw	s0,28(sp)
     f00:	02010113          	addi	sp,sp,32
     f04:	00008067          	ret

00000f08 <_set_flag>:

static inline void _set_flag(struct Page *page, uint8_t flags)
{
     f08:	fe010113          	addi	sp,sp,-32
     f0c:	00812e23          	sw	s0,28(sp)
     f10:	02010413          	addi	s0,sp,32
     f14:	fea42623          	sw	a0,-20(s0)
     f18:	00058793          	mv	a5,a1
     f1c:	fef405a3          	sb	a5,-21(s0)
	page->flags |= flags;
     f20:	fec42783          	lw	a5,-20(s0)
     f24:	0007c783          	lbu	a5,0(a5)
     f28:	feb44703          	lbu	a4,-21(s0)
     f2c:	00e7e7b3          	or	a5,a5,a4
     f30:	0ff7f713          	zext.b	a4,a5
     f34:	fec42783          	lw	a5,-20(s0)
     f38:	00e78023          	sb	a4,0(a5)
}
     f3c:	00000013          	nop
     f40:	01c12403          	lw	s0,28(sp)
     f44:	02010113          	addi	sp,sp,32
     f48:	00008067          	ret

00000f4c <_is_last>:

static inline int _is_last(struct Page *page)
{
     f4c:	fe010113          	addi	sp,sp,-32
     f50:	00812e23          	sw	s0,28(sp)
     f54:	02010413          	addi	s0,sp,32
     f58:	fea42623          	sw	a0,-20(s0)
	if (page->flags & PAGE_LAST) {
     f5c:	fec42783          	lw	a5,-20(s0)
     f60:	0007c783          	lbu	a5,0(a5)
     f64:	0027f793          	andi	a5,a5,2
     f68:	00078663          	beqz	a5,f74 <_is_last+0x28>
		return 1;
     f6c:	00100793          	li	a5,1
     f70:	0080006f          	j	f78 <_is_last+0x2c>
	} else {
		return 0;
     f74:	00000793          	li	a5,0
	}
}
     f78:	00078513          	mv	a0,a5
     f7c:	01c12403          	lw	s0,28(sp)
     f80:	02010113          	addi	sp,sp,32
     f84:	00008067          	ret

00000f88 <_align_page>:

/*
 * align the address to the border of page(4K)
 */
static inline uint32_t _align_page(uint32_t address)
{
     f88:	fd010113          	addi	sp,sp,-48
     f8c:	02812623          	sw	s0,44(sp)
     f90:	03010413          	addi	s0,sp,48
     f94:	fca42e23          	sw	a0,-36(s0)
	uint32_t order = (1 << PAGE_ORDER) - 1;
     f98:	000017b7          	lui	a5,0x1
     f9c:	fff78793          	addi	a5,a5,-1 # fff <page_init+0x33>
     fa0:	fef42623          	sw	a5,-20(s0)
	return (address + order) & (~order);
     fa4:	fdc42703          	lw	a4,-36(s0)
     fa8:	fec42783          	lw	a5,-20(s0)
     fac:	00f70733          	add	a4,a4,a5
     fb0:	fec42783          	lw	a5,-20(s0)
     fb4:	fff7c793          	not	a5,a5
     fb8:	00f777b3          	and	a5,a4,a5
}
     fbc:	00078513          	mv	a0,a5
     fc0:	02c12403          	lw	s0,44(sp)
     fc4:	03010113          	addi	sp,sp,48
     fc8:	00008067          	ret

00000fcc <page_init>:

void page_init()
{
     fcc:	fe010113          	addi	sp,sp,-32
     fd0:	00112e23          	sw	ra,28(sp)
     fd4:	00812c23          	sw	s0,24(sp)
     fd8:	02010413          	addi	s0,sp,32
	/* 
	 * We reserved 8 Page (8 x 4096) to hold the Page structures.
	 * It should be enough to manage at most 128 MB (8 x 4096 x 4096) 
	 */
	_num_pages = (HEAP_SIZE / PAGE_SIZE) - 8;
     fdc:	000027b7          	lui	a5,0x2
     fe0:	b607a783          	lw	a5,-1184(a5) # 1b60 <HEAP_SIZE>
     fe4:	00c7d793          	srli	a5,a5,0xc
     fe8:	ff878713          	addi	a4,a5,-8
     fec:	000027b7          	lui	a5,0x2
     ff0:	3ee7aa23          	sw	a4,1012(a5) # 23f4 <_num_pages>
	printf("HEAP_START = %x, HEAP_SIZE = %x, num of pages = %d\n", HEAP_START, HEAP_SIZE, _num_pages);
     ff4:	000027b7          	lui	a5,0x2
     ff8:	b5c7a703          	lw	a4,-1188(a5) # 1b5c <_text_end>
     ffc:	000027b7          	lui	a5,0x2
    1000:	b607a603          	lw	a2,-1184(a5) # 1b60 <HEAP_SIZE>
    1004:	000027b7          	lui	a5,0x2
    1008:	3f47a783          	lw	a5,1012(a5) # 23f4 <_num_pages>
    100c:	00078693          	mv	a3,a5
    1010:	00070593          	mv	a1,a4
    1014:	000027b7          	lui	a5,0x2
    1018:	c3878513          	addi	a0,a5,-968 # 1c38 <BSS_END+0xb8>
    101c:	d9dff0ef          	jal	ra,db8 <printf>
	
	struct Page *page = (struct Page *)HEAP_START;
    1020:	000027b7          	lui	a5,0x2
    1024:	b5c7a783          	lw	a5,-1188(a5) # 1b5c <_text_end>
    1028:	fef42623          	sw	a5,-20(s0)
	for (int i = 0; i < _num_pages; i++) {
    102c:	fe042423          	sw	zero,-24(s0)
    1030:	0240006f          	j	1054 <page_init+0x88>
		_clear(page);
    1034:	fec42503          	lw	a0,-20(s0)
    1038:	e6dff0ef          	jal	ra,ea4 <_clear>
		page++;	
    103c:	fec42783          	lw	a5,-20(s0)
    1040:	00178793          	addi	a5,a5,1
    1044:	fef42623          	sw	a5,-20(s0)
	for (int i = 0; i < _num_pages; i++) {
    1048:	fe842783          	lw	a5,-24(s0)
    104c:	00178793          	addi	a5,a5,1
    1050:	fef42423          	sw	a5,-24(s0)
    1054:	fe842703          	lw	a4,-24(s0)
    1058:	000027b7          	lui	a5,0x2
    105c:	3f47a783          	lw	a5,1012(a5) # 23f4 <_num_pages>
    1060:	fcf76ae3          	bltu	a4,a5,1034 <page_init+0x68>
	}

	_alloc_start = _align_page(HEAP_START + 8 * PAGE_SIZE);
    1064:	000027b7          	lui	a5,0x2
    1068:	b5c7a703          	lw	a4,-1188(a5) # 1b5c <_text_end>
    106c:	000087b7          	lui	a5,0x8
    1070:	00f707b3          	add	a5,a4,a5
    1074:	00078513          	mv	a0,a5
    1078:	f11ff0ef          	jal	ra,f88 <_align_page>
    107c:	00050713          	mv	a4,a0
    1080:	000027b7          	lui	a5,0x2
    1084:	3ee7a623          	sw	a4,1004(a5) # 23ec <_alloc_start>
	_alloc_end = _alloc_start + (PAGE_SIZE * _num_pages);
    1088:	000027b7          	lui	a5,0x2
    108c:	3f47a783          	lw	a5,1012(a5) # 23f4 <_num_pages>
    1090:	00c79713          	slli	a4,a5,0xc
    1094:	000027b7          	lui	a5,0x2
    1098:	3ec7a783          	lw	a5,1004(a5) # 23ec <_alloc_start>
    109c:	00f70733          	add	a4,a4,a5
    10a0:	000027b7          	lui	a5,0x2
    10a4:	3ee7a823          	sw	a4,1008(a5) # 23f0 <_alloc_end>

	printf("TEXT:   0x%x -> 0x%x\n", TEXT_START, TEXT_END);
    10a8:	000027b7          	lui	a5,0x2
    10ac:	b647a703          	lw	a4,-1180(a5) # 1b64 <TEXT_START>
    10b0:	000027b7          	lui	a5,0x2
    10b4:	b687a783          	lw	a5,-1176(a5) # 1b68 <TEXT_END>
    10b8:	00078613          	mv	a2,a5
    10bc:	00070593          	mv	a1,a4
    10c0:	000027b7          	lui	a5,0x2
    10c4:	c6c78513          	addi	a0,a5,-916 # 1c6c <BSS_END+0xec>
    10c8:	cf1ff0ef          	jal	ra,db8 <printf>
	printf("RODATA: 0x%x -> 0x%x\n", RODATA_START, RODATA_END);
    10cc:	000027b7          	lui	a5,0x2
    10d0:	b747a703          	lw	a4,-1164(a5) # 1b74 <RODATA_START>
    10d4:	000027b7          	lui	a5,0x2
    10d8:	b787a783          	lw	a5,-1160(a5) # 1b78 <RODATA_END>
    10dc:	00078613          	mv	a2,a5
    10e0:	00070593          	mv	a1,a4
    10e4:	000027b7          	lui	a5,0x2
    10e8:	c8478513          	addi	a0,a5,-892 # 1c84 <BSS_END+0x104>
    10ec:	ccdff0ef          	jal	ra,db8 <printf>
	printf("DATA:   0x%x -> 0x%x\n", DATA_START, DATA_END);
    10f0:	000027b7          	lui	a5,0x2
    10f4:	b6c7a703          	lw	a4,-1172(a5) # 1b6c <DATA_START>
    10f8:	000027b7          	lui	a5,0x2
    10fc:	b707a783          	lw	a5,-1168(a5) # 1b70 <DATA_END>
    1100:	00078613          	mv	a2,a5
    1104:	00070593          	mv	a1,a4
    1108:	000027b7          	lui	a5,0x2
    110c:	c9c78513          	addi	a0,a5,-868 # 1c9c <BSS_END+0x11c>
    1110:	ca9ff0ef          	jal	ra,db8 <printf>
	printf("BSS:    0x%x -> 0x%x\n", BSS_START, BSS_END);
    1114:	000027b7          	lui	a5,0x2
    1118:	b7c7a703          	lw	a4,-1156(a5) # 1b7c <BSS_START>
    111c:	000027b7          	lui	a5,0x2
    1120:	b807a783          	lw	a5,-1152(a5) # 1b80 <BSS_END>
    1124:	00078613          	mv	a2,a5
    1128:	00070593          	mv	a1,a4
    112c:	000027b7          	lui	a5,0x2
    1130:	cb478513          	addi	a0,a5,-844 # 1cb4 <BSS_END+0x134>
    1134:	c85ff0ef          	jal	ra,db8 <printf>
	printf("HEAP:   0x%x -> 0x%x\n", _alloc_start, _alloc_end);
    1138:	000027b7          	lui	a5,0x2
    113c:	3ec7a703          	lw	a4,1004(a5) # 23ec <_alloc_start>
    1140:	000027b7          	lui	a5,0x2
    1144:	3f07a783          	lw	a5,1008(a5) # 23f0 <_alloc_end>
    1148:	00078613          	mv	a2,a5
    114c:	00070593          	mv	a1,a4
    1150:	000027b7          	lui	a5,0x2
    1154:	ccc78513          	addi	a0,a5,-820 # 1ccc <BSS_END+0x14c>
    1158:	c61ff0ef          	jal	ra,db8 <printf>
}
    115c:	00000013          	nop
    1160:	01c12083          	lw	ra,28(sp)
    1164:	01812403          	lw	s0,24(sp)
    1168:	02010113          	addi	sp,sp,32
    116c:	00008067          	ret

00001170 <page_alloc>:
/*
 * Allocate a memory block which is composed of contiguous physical pages
 * - npages: the number of PAGE_SIZE pages to allocate
 */
void *page_alloc(int npages)
{
    1170:	fc010113          	addi	sp,sp,-64
    1174:	02112e23          	sw	ra,60(sp)
    1178:	02812c23          	sw	s0,56(sp)
    117c:	04010413          	addi	s0,sp,64
    1180:	fca42623          	sw	a0,-52(s0)
	/* Note we are searching the page descriptor bitmaps. */
	int found = 0;
    1184:	fe042623          	sw	zero,-20(s0)
	struct Page *page_i = (struct Page *)HEAP_START;
    1188:	000027b7          	lui	a5,0x2
    118c:	b5c7a783          	lw	a5,-1188(a5) # 1b5c <_text_end>
    1190:	fef42423          	sw	a5,-24(s0)
	for (int i = 0; i <= (_num_pages - npages); i++) {
    1194:	fe042223          	sw	zero,-28(s0)
    1198:	1140006f          	j	12ac <page_alloc+0x13c>
		if (_is_free(page_i)) {
    119c:	fe842503          	lw	a0,-24(s0)
    11a0:	d2dff0ef          	jal	ra,ecc <_is_free>
    11a4:	00050793          	mv	a5,a0
    11a8:	0e078663          	beqz	a5,1294 <page_alloc+0x124>
			found = 1;
    11ac:	00100793          	li	a5,1
    11b0:	fef42623          	sw	a5,-20(s0)
			/* 
			 * meet a free page, continue to check if following
			 * (npages - 1) pages are also unallocated.
			 */
			struct Page *page_j = page_i;
    11b4:	fe842783          	lw	a5,-24(s0)
    11b8:	fef42023          	sw	a5,-32(s0)
			for (int j = i; j < (i + npages); j++) {
    11bc:	fe442783          	lw	a5,-28(s0)
    11c0:	fcf42e23          	sw	a5,-36(s0)
    11c4:	0340006f          	j	11f8 <page_alloc+0x88>
				if (!_is_free(page_j)) {
    11c8:	fe042503          	lw	a0,-32(s0)
    11cc:	d01ff0ef          	jal	ra,ecc <_is_free>
    11d0:	00050793          	mv	a5,a0
    11d4:	00079663          	bnez	a5,11e0 <page_alloc+0x70>
					found = 0;
    11d8:	fe042623          	sw	zero,-20(s0)
					break;
    11dc:	0300006f          	j	120c <page_alloc+0x9c>
				}
				page_j++;
    11e0:	fe042783          	lw	a5,-32(s0)
    11e4:	00178793          	addi	a5,a5,1
    11e8:	fef42023          	sw	a5,-32(s0)
			for (int j = i; j < (i + npages); j++) {
    11ec:	fdc42783          	lw	a5,-36(s0)
    11f0:	00178793          	addi	a5,a5,1
    11f4:	fcf42e23          	sw	a5,-36(s0)
    11f8:	fe442703          	lw	a4,-28(s0)
    11fc:	fcc42783          	lw	a5,-52(s0)
    1200:	00f707b3          	add	a5,a4,a5
    1204:	fdc42703          	lw	a4,-36(s0)
    1208:	fcf740e3          	blt	a4,a5,11c8 <page_alloc+0x58>
			/*
			 * get a memory block which is good enough for us,
			 * take housekeeping, then return the actual start
			 * address of the first page of this memory block
			 */
			if (found) {
    120c:	fec42783          	lw	a5,-20(s0)
    1210:	08078263          	beqz	a5,1294 <page_alloc+0x124>
				struct Page *page_k = page_i;
    1214:	fe842783          	lw	a5,-24(s0)
    1218:	fcf42c23          	sw	a5,-40(s0)
				for (int k = i; k < (i + npages); k++) {
    121c:	fe442783          	lw	a5,-28(s0)
    1220:	fcf42a23          	sw	a5,-44(s0)
    1224:	0280006f          	j	124c <page_alloc+0xdc>
					_set_flag(page_k, PAGE_TAKEN);
    1228:	00100593          	li	a1,1
    122c:	fd842503          	lw	a0,-40(s0)
    1230:	cd9ff0ef          	jal	ra,f08 <_set_flag>
					page_k++;
    1234:	fd842783          	lw	a5,-40(s0)
    1238:	00178793          	addi	a5,a5,1
    123c:	fcf42c23          	sw	a5,-40(s0)
				for (int k = i; k < (i + npages); k++) {
    1240:	fd442783          	lw	a5,-44(s0)
    1244:	00178793          	addi	a5,a5,1
    1248:	fcf42a23          	sw	a5,-44(s0)
    124c:	fe442703          	lw	a4,-28(s0)
    1250:	fcc42783          	lw	a5,-52(s0)
    1254:	00f707b3          	add	a5,a4,a5
    1258:	fd442703          	lw	a4,-44(s0)
    125c:	fcf746e3          	blt	a4,a5,1228 <page_alloc+0xb8>
				}
				page_k--;
    1260:	fd842783          	lw	a5,-40(s0)
    1264:	fff78793          	addi	a5,a5,-1
    1268:	fcf42c23          	sw	a5,-40(s0)
				_set_flag(page_k, PAGE_LAST);
    126c:	00200593          	li	a1,2
    1270:	fd842503          	lw	a0,-40(s0)
    1274:	c95ff0ef          	jal	ra,f08 <_set_flag>
				return (void *)(_alloc_start + i * PAGE_SIZE);
    1278:	fe442783          	lw	a5,-28(s0)
    127c:	00c79793          	slli	a5,a5,0xc
    1280:	00078713          	mv	a4,a5
    1284:	000027b7          	lui	a5,0x2
    1288:	3ec7a783          	lw	a5,1004(a5) # 23ec <_alloc_start>
    128c:	00f707b3          	add	a5,a4,a5
    1290:	0380006f          	j	12c8 <page_alloc+0x158>
			}
		}
		page_i++;
    1294:	fe842783          	lw	a5,-24(s0)
    1298:	00178793          	addi	a5,a5,1
    129c:	fef42423          	sw	a5,-24(s0)
	for (int i = 0; i <= (_num_pages - npages); i++) {
    12a0:	fe442783          	lw	a5,-28(s0)
    12a4:	00178793          	addi	a5,a5,1
    12a8:	fef42223          	sw	a5,-28(s0)
    12ac:	000027b7          	lui	a5,0x2
    12b0:	3f47a703          	lw	a4,1012(a5) # 23f4 <_num_pages>
    12b4:	fcc42783          	lw	a5,-52(s0)
    12b8:	40f70733          	sub	a4,a4,a5
    12bc:	fe442783          	lw	a5,-28(s0)
    12c0:	ecf77ee3          	bgeu	a4,a5,119c <page_alloc+0x2c>
	}
	return NULL;
    12c4:	00000793          	li	a5,0
}
    12c8:	00078513          	mv	a0,a5
    12cc:	03c12083          	lw	ra,60(sp)
    12d0:	03812403          	lw	s0,56(sp)
    12d4:	04010113          	addi	sp,sp,64
    12d8:	00008067          	ret

000012dc <page_free>:
/*
 * Free the memory block
 * - p: start address of the memory block
 */
void page_free(void *p)
{
    12dc:	fd010113          	addi	sp,sp,-48
    12e0:	02112623          	sw	ra,44(sp)
    12e4:	02812423          	sw	s0,40(sp)
    12e8:	03010413          	addi	s0,sp,48
    12ec:	fca42e23          	sw	a0,-36(s0)
	/*
	 * Assert (TBD) if p is invalid
	 */
	if (!p || (uint32_t)p >= _alloc_end) {
    12f0:	fdc42783          	lw	a5,-36(s0)
    12f4:	08078463          	beqz	a5,137c <page_free+0xa0>
    12f8:	fdc42703          	lw	a4,-36(s0)
    12fc:	000027b7          	lui	a5,0x2
    1300:	3f07a783          	lw	a5,1008(a5) # 23f0 <_alloc_end>
    1304:	06f77c63          	bgeu	a4,a5,137c <page_free+0xa0>
		return;
	}
	/* get the first page descriptor of this memory block */
	struct Page *page = (struct Page *)HEAP_START;
    1308:	000027b7          	lui	a5,0x2
    130c:	b5c7a783          	lw	a5,-1188(a5) # 1b5c <_text_end>
    1310:	fef42623          	sw	a5,-20(s0)
	page += ((uint32_t)p - _alloc_start)/ PAGE_SIZE;
    1314:	fdc42703          	lw	a4,-36(s0)
    1318:	000027b7          	lui	a5,0x2
    131c:	3ec7a783          	lw	a5,1004(a5) # 23ec <_alloc_start>
    1320:	40f707b3          	sub	a5,a4,a5
    1324:	00c7d793          	srli	a5,a5,0xc
    1328:	fec42703          	lw	a4,-20(s0)
    132c:	00f707b3          	add	a5,a4,a5
    1330:	fef42623          	sw	a5,-20(s0)
	/* loop and clear all the page descriptors of the memory block */
	while (!_is_free(page)) {
    1334:	0340006f          	j	1368 <page_free+0x8c>
		if (_is_last(page)) {
    1338:	fec42503          	lw	a0,-20(s0)
    133c:	c11ff0ef          	jal	ra,f4c <_is_last>
    1340:	00050793          	mv	a5,a0
    1344:	00078863          	beqz	a5,1354 <page_free+0x78>
			_clear(page);
    1348:	fec42503          	lw	a0,-20(s0)
    134c:	b59ff0ef          	jal	ra,ea4 <_clear>
			break;
    1350:	0300006f          	j	1380 <page_free+0xa4>
		} else {
			_clear(page);
    1354:	fec42503          	lw	a0,-20(s0)
    1358:	b4dff0ef          	jal	ra,ea4 <_clear>
			page++;;
    135c:	fec42783          	lw	a5,-20(s0)
    1360:	00178793          	addi	a5,a5,1
    1364:	fef42623          	sw	a5,-20(s0)
	while (!_is_free(page)) {
    1368:	fec42503          	lw	a0,-20(s0)
    136c:	b61ff0ef          	jal	ra,ecc <_is_free>
    1370:	00050793          	mv	a5,a0
    1374:	fc0782e3          	beqz	a5,1338 <page_free+0x5c>
    1378:	0080006f          	j	1380 <page_free+0xa4>
		return;
    137c:	00000013          	nop
		}
	}
}
    1380:	02c12083          	lw	ra,44(sp)
    1384:	02812403          	lw	s0,40(sp)
    1388:	03010113          	addi	sp,sp,48
    138c:	00008067          	ret

00001390 <page_test>:

void page_test()
{
    1390:	fe010113          	addi	sp,sp,-32
    1394:	00112e23          	sw	ra,28(sp)
    1398:	00812c23          	sw	s0,24(sp)
    139c:	02010413          	addi	s0,sp,32
	void *p = page_alloc(2);
    13a0:	00200513          	li	a0,2
    13a4:	dcdff0ef          	jal	ra,1170 <page_alloc>
    13a8:	fea42623          	sw	a0,-20(s0)
	printf("p = 0x%x\n", p);
    13ac:	fec42583          	lw	a1,-20(s0)
    13b0:	000027b7          	lui	a5,0x2
    13b4:	ce478513          	addi	a0,a5,-796 # 1ce4 <BSS_END+0x164>
    13b8:	a01ff0ef          	jal	ra,db8 <printf>
	//page_free(p);

	void *p2 = page_alloc(7);
    13bc:	00700513          	li	a0,7
    13c0:	db1ff0ef          	jal	ra,1170 <page_alloc>
    13c4:	fea42423          	sw	a0,-24(s0)
	printf("p2 = 0x%x\n", p2);
    13c8:	fe842583          	lw	a1,-24(s0)
    13cc:	000027b7          	lui	a5,0x2
    13d0:	cf078513          	addi	a0,a5,-784 # 1cf0 <BSS_END+0x170>
    13d4:	9e5ff0ef          	jal	ra,db8 <printf>
	page_free(p2);
    13d8:	fe842503          	lw	a0,-24(s0)
    13dc:	f01ff0ef          	jal	ra,12dc <page_free>

	void *p3 = page_alloc(4);
    13e0:	00400513          	li	a0,4
    13e4:	d8dff0ef          	jal	ra,1170 <page_alloc>
    13e8:	fea42223          	sw	a0,-28(s0)
	printf("p3 = 0x%x\n", p3);
    13ec:	fe442583          	lw	a1,-28(s0)
    13f0:	000027b7          	lui	a5,0x2
    13f4:	cfc78513          	addi	a0,a5,-772 # 1cfc <BSS_END+0x17c>
    13f8:	9c1ff0ef          	jal	ra,db8 <printf>
}
    13fc:	00000013          	nop
    1400:	01c12083          	lw	ra,28(sp)
    1404:	01812403          	lw	s0,24(sp)
    1408:	02010113          	addi	sp,sp,32
    140c:	00008067          	ret

00001410 <w_mscratch>:

/* Machine Scratch register, for early trap handler */
static inline void w_mscratch(reg_t x)
{
    1410:	fe010113          	addi	sp,sp,-32
    1414:	00812e23          	sw	s0,28(sp)
    1418:	02010413          	addi	s0,sp,32
    141c:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mscratch, %0" : : "r" (x));
    1420:	fec42783          	lw	a5,-20(s0)
    1424:	34079073          	csrw	mscratch,a5
}
    1428:	00000013          	nop
    142c:	01c12403          	lw	s0,28(sp)
    1430:	02010113          	addi	sp,sp,32
    1434:	00008067          	ret

00001438 <sched_init>:
 */
static int _top = 0;
static int _current = -1;

void sched_init()
{
    1438:	ff010113          	addi	sp,sp,-16
    143c:	00112623          	sw	ra,12(sp)
    1440:	00812423          	sw	s0,8(sp)
    1444:	01010413          	addi	s0,sp,16
	w_mscratch(0);
    1448:	00000513          	li	a0,0
    144c:	fc5ff0ef          	jal	ra,1410 <w_mscratch>
}
    1450:	00000013          	nop
    1454:	00c12083          	lw	ra,12(sp)
    1458:	00812403          	lw	s0,8(sp)
    145c:	01010113          	addi	sp,sp,16
    1460:	00008067          	ret

00001464 <schedule>:

/*
 * implment a simple cycle FIFO schedular
 */
void schedule()
{
    1464:	fe010113          	addi	sp,sp,-32
    1468:	00112e23          	sw	ra,28(sp)
    146c:	00812c23          	sw	s0,24(sp)
    1470:	02010413          	addi	s0,sp,32
	if (_top <= 0) {
    1474:	000057b7          	lui	a5,0x5
    1478:	0d07a783          	lw	a5,208(a5) # 50d0 <_top>
    147c:	00f04a63          	bgtz	a5,1490 <schedule+0x2c>
		panic("Num of task should be greater than zero!");
    1480:	000027b7          	lui	a5,0x2
    1484:	d0878513          	addi	a0,a5,-760 # 1d08 <BSS_END+0x188>
    1488:	9a5ff0ef          	jal	ra,e2c <panic>
		return;
    148c:	0540006f          	j	14e0 <schedule+0x7c>
	}

	_current = (_current + 1) % _top;
    1490:	000027b7          	lui	a5,0x2
    1494:	0007a783          	lw	a5,0(a5) # 2000 <_current>
    1498:	00178713          	addi	a4,a5,1
    149c:	000057b7          	lui	a5,0x5
    14a0:	0d07a783          	lw	a5,208(a5) # 50d0 <_top>
    14a4:	02f76733          	rem	a4,a4,a5
    14a8:	000027b7          	lui	a5,0x2
    14ac:	00e7a023          	sw	a4,0(a5) # 2000 <_current>
	struct context *next = &(ctx_tasks[_current]);
    14b0:	000027b7          	lui	a5,0x2
    14b4:	0007a703          	lw	a4,0(a5) # 2000 <_current>
    14b8:	00070793          	mv	a5,a4
    14bc:	00579793          	slli	a5,a5,0x5
    14c0:	40e787b3          	sub	a5,a5,a4
    14c4:	00279793          	slli	a5,a5,0x2
    14c8:	00005737          	lui	a4,0x5
    14cc:	bf870713          	addi	a4,a4,-1032 # 4bf8 <ctx_tasks>
    14d0:	00e787b3          	add	a5,a5,a4
    14d4:	fef42623          	sw	a5,-20(s0)
	switch_to(next);
    14d8:	fec42503          	lw	a0,-20(s0)
    14dc:	8a4ff0ef          	jal	ra,580 <switch_to>
}
    14e0:	01c12083          	lw	ra,28(sp)
    14e4:	01812403          	lw	s0,24(sp)
    14e8:	02010113          	addi	sp,sp,32
    14ec:	00008067          	ret

000014f0 <task_create>:
 * RETURN VALUE
 * 	0: success
 * 	-1: if error occured
 */
int task_create(void (*start_routin)(void))
{
    14f0:	fe010113          	addi	sp,sp,-32
    14f4:	00812e23          	sw	s0,28(sp)
    14f8:	02010413          	addi	s0,sp,32
    14fc:	fea42623          	sw	a0,-20(s0)
	if (_top < MAX_TASKS) {
    1500:	000057b7          	lui	a5,0x5
    1504:	0d07a703          	lw	a4,208(a5) # 50d0 <_top>
    1508:	00900793          	li	a5,9
    150c:	08e7ca63          	blt	a5,a4,15a0 <task_create+0xb0>
		ctx_tasks[_top].sp = (reg_t) &task_stack[_top][STACK_SIZE - 1];
    1510:	000057b7          	lui	a5,0x5
    1514:	0d07a783          	lw	a5,208(a5) # 50d0 <_top>
    1518:	00a79793          	slli	a5,a5,0xa
    151c:	3ff78713          	addi	a4,a5,1023
    1520:	000027b7          	lui	a5,0x2
    1524:	3f878793          	addi	a5,a5,1016 # 23f8 <task_stack>
    1528:	00f706b3          	add	a3,a4,a5
    152c:	000057b7          	lui	a5,0x5
    1530:	0d07a703          	lw	a4,208(a5) # 50d0 <_top>
    1534:	00068613          	mv	a2,a3
    1538:	000057b7          	lui	a5,0x5
    153c:	bf878693          	addi	a3,a5,-1032 # 4bf8 <ctx_tasks>
    1540:	00070793          	mv	a5,a4
    1544:	00579793          	slli	a5,a5,0x5
    1548:	40e787b3          	sub	a5,a5,a4
    154c:	00279793          	slli	a5,a5,0x2
    1550:	00f687b3          	add	a5,a3,a5
    1554:	00c7a223          	sw	a2,4(a5)
		ctx_tasks[_top].ra = (reg_t) start_routin;
    1558:	000057b7          	lui	a5,0x5
    155c:	0d07a703          	lw	a4,208(a5) # 50d0 <_top>
    1560:	fec42683          	lw	a3,-20(s0)
    1564:	000057b7          	lui	a5,0x5
    1568:	bf878613          	addi	a2,a5,-1032 # 4bf8 <ctx_tasks>
    156c:	00070793          	mv	a5,a4
    1570:	00579793          	slli	a5,a5,0x5
    1574:	40e787b3          	sub	a5,a5,a4
    1578:	00279793          	slli	a5,a5,0x2
    157c:	00f607b3          	add	a5,a2,a5
    1580:	00d7a023          	sw	a3,0(a5)
		_top++;
    1584:	000057b7          	lui	a5,0x5
    1588:	0d07a783          	lw	a5,208(a5) # 50d0 <_top>
    158c:	00178713          	addi	a4,a5,1
    1590:	000057b7          	lui	a5,0x5
    1594:	0ce7a823          	sw	a4,208(a5) # 50d0 <_top>
		return 0;
    1598:	00000793          	li	a5,0
    159c:	0080006f          	j	15a4 <task_create+0xb4>
	} else {
		return -1;
    15a0:	fff00793          	li	a5,-1
	}
}
    15a4:	00078513          	mv	a0,a5
    15a8:	01c12403          	lw	s0,28(sp)
    15ac:	02010113          	addi	sp,sp,32
    15b0:	00008067          	ret

000015b4 <task_yield>:
 * DESCRIPTION
 * 	task_yield()  causes the calling task to relinquish the CPU and a new 
 * 	task gets to run.
 */
void task_yield()
{
    15b4:	ff010113          	addi	sp,sp,-16
    15b8:	00112623          	sw	ra,12(sp)
    15bc:	00812423          	sw	s0,8(sp)
    15c0:	01010413          	addi	s0,sp,16
	schedule();
    15c4:	ea1ff0ef          	jal	ra,1464 <schedule>
}
    15c8:	00000013          	nop
    15cc:	00c12083          	lw	ra,12(sp)
    15d0:	00812403          	lw	s0,8(sp)
    15d4:	01010113          	addi	sp,sp,16
    15d8:	00008067          	ret

000015dc <task_delay>:

/*
 * a very rough implementaion, just to consume the cpu
 */
void task_delay(volatile int count)
{
    15dc:	fe010113          	addi	sp,sp,-32
    15e0:	00812e23          	sw	s0,28(sp)
    15e4:	02010413          	addi	s0,sp,32
    15e8:	fea42623          	sw	a0,-20(s0)
	count *= 50;
    15ec:	fec42703          	lw	a4,-20(s0)
    15f0:	03200793          	li	a5,50
    15f4:	02f707b3          	mul	a5,a4,a5
    15f8:	fef42623          	sw	a5,-20(s0)
	while (count--);
    15fc:	00000013          	nop
    1600:	fec42783          	lw	a5,-20(s0)
    1604:	fff78713          	addi	a4,a5,-1
    1608:	fee42623          	sw	a4,-20(s0)
    160c:	fe079ae3          	bnez	a5,1600 <task_delay+0x24>
}
    1610:	00000013          	nop
    1614:	00000013          	nop
    1618:	01c12403          	lw	s0,28(sp)
    161c:	02010113          	addi	sp,sp,32
    1620:	00008067          	ret

00001624 <user_task0>:
#include "os.h"

#define DELAY 100

void user_task0(void)
{
    1624:	ff010113          	addi	sp,sp,-16
    1628:	00112623          	sw	ra,12(sp)
    162c:	00812423          	sw	s0,8(sp)
    1630:	01010413          	addi	s0,sp,16
	uart_puts("Task 0: Created!\n");
    1634:	000027b7          	lui	a5,0x2
    1638:	d3478513          	addi	a0,a5,-716 # 1d34 <BSS_END+0x1b4>
    163c:	938ff0ef          	jal	ra,774 <uart_puts>
	while (1) {
		//uart_puts("Task 0: Running...\n");
		task_delay(DELAY);
    1640:	06400513          	li	a0,100
    1644:	f99ff0ef          	jal	ra,15dc <task_delay>
		task_yield();
    1648:	f6dff0ef          	jal	ra,15b4 <task_yield>
		task_delay(DELAY);
    164c:	00000013          	nop
    1650:	ff1ff06f          	j	1640 <user_task0+0x1c>

00001654 <user_task1>:
	}
}

void user_task1(void)
{
    1654:	ff010113          	addi	sp,sp,-16
    1658:	00112623          	sw	ra,12(sp)
    165c:	00812423          	sw	s0,8(sp)
    1660:	01010413          	addi	s0,sp,16
	uart_puts("Task 1: Created!\n");
    1664:	000027b7          	lui	a5,0x2
    1668:	d4878513          	addi	a0,a5,-696 # 1d48 <BSS_END+0x1c8>
    166c:	908ff0ef          	jal	ra,774 <uart_puts>
	while (1) {
		//uart_puts("Task 1: Running...\n");
		task_delay(DELAY);
    1670:	06400513          	li	a0,100
    1674:	f69ff0ef          	jal	ra,15dc <task_delay>
		task_yield();
    1678:	f3dff0ef          	jal	ra,15b4 <task_yield>
		task_delay(DELAY);
    167c:	00000013          	nop
    1680:	ff1ff06f          	j	1670 <user_task1+0x1c>

00001684 <os_main>:
	}
}

/* NOTICE: DON'T LOOP INFINITELY IN main() */
void os_main(void)
{
    1684:	ff010113          	addi	sp,sp,-16
    1688:	00112623          	sw	ra,12(sp)
    168c:	00812423          	sw	s0,8(sp)
    1690:	01010413          	addi	s0,sp,16
	task_create(user_task0);
    1694:	000017b7          	lui	a5,0x1
    1698:	62478513          	addi	a0,a5,1572 # 1624 <user_task0>
    169c:	e55ff0ef          	jal	ra,14f0 <task_create>
	task_create(user_task1);
    16a0:	000017b7          	lui	a5,0x1
    16a4:	65478513          	addi	a0,a5,1620 # 1654 <user_task1>
    16a8:	e49ff0ef          	jal	ra,14f0 <task_create>
}
    16ac:	00000013          	nop
    16b0:	00c12083          	lw	ra,12(sp)
    16b4:	00812403          	lw	s0,8(sp)
    16b8:	01010113          	addi	sp,sp,16
    16bc:	00008067          	ret

000016c0 <w_mtvec>:

/* Machine-mode interrupt vector */
static inline void w_mtvec(reg_t x)
{
    16c0:	fe010113          	addi	sp,sp,-32
    16c4:	00812e23          	sw	s0,28(sp)
    16c8:	02010413          	addi	s0,sp,32
    16cc:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mtvec, %0" : : "r" (x));
    16d0:	fec42783          	lw	a5,-20(s0)
    16d4:	30579073          	csrw	mtvec,a5
}
    16d8:	00000013          	nop
    16dc:	01c12403          	lw	s0,28(sp)
    16e0:	02010113          	addi	sp,sp,32
    16e4:	00008067          	ret

000016e8 <r_mtvec>:

static inline reg_t r_mtvec()
{
    16e8:	fe010113          	addi	sp,sp,-32
    16ec:	00812e23          	sw	s0,28(sp)
    16f0:	02010413          	addi	s0,sp,32
	reg_t x;
	asm volatile("csrr %0, mtvec" : "=r" (x));
    16f4:	305027f3          	csrr	a5,mtvec
    16f8:	fef42623          	sw	a5,-20(s0)
	return x;
    16fc:	fec42783          	lw	a5,-20(s0)
}
    1700:	00078513          	mv	a0,a5
    1704:	01c12403          	lw	s0,28(sp)
    1708:	02010113          	addi	sp,sp,32
    170c:	00008067          	ret

00001710 <trap_init>:

extern void trap_vector(void);
extern void timer_handler(void);

void trap_init()
{
    1710:	ff010113          	addi	sp,sp,-16
    1714:	00112623          	sw	ra,12(sp)
    1718:	00812423          	sw	s0,8(sp)
    171c:	01010413          	addi	s0,sp,16
	/*
	 * set the trap-vector base-address for machine-mode
	 */
	w_mtvec((reg_t)trap_vector);
    1720:	45000793          	li	a5,1104
    1724:	00078513          	mv	a0,a5
    1728:	f99ff0ef          	jal	ra,16c0 <w_mtvec>

}
    172c:	00000013          	nop
    1730:	00c12083          	lw	ra,12(sp)
    1734:	00812403          	lw	s0,8(sp)
    1738:	01010113          	addi	sp,sp,16
    173c:	00008067          	ret

00001740 <trap_handler>:

reg_t trap_handler(reg_t epc, reg_t cause)
{
    1740:	fd010113          	addi	sp,sp,-48
    1744:	02112623          	sw	ra,44(sp)
    1748:	02812423          	sw	s0,40(sp)
    174c:	03010413          	addi	s0,sp,48
    1750:	fca42e23          	sw	a0,-36(s0)
    1754:	fcb42c23          	sw	a1,-40(s0)
	reg_t return_pc = epc;
    1758:	fdc42783          	lw	a5,-36(s0)
    175c:	fef42623          	sw	a5,-20(s0)
	reg_t cause_code = cause & 0xfff;
    1760:	fd842703          	lw	a4,-40(s0)
    1764:	000017b7          	lui	a5,0x1
    1768:	fff78793          	addi	a5,a5,-1 # fff <page_init+0x33>
    176c:	00f777b3          	and	a5,a4,a5
    1770:	fef42423          	sw	a5,-24(s0)
	
	printf("epc = %08x\n", epc);
    1774:	fdc42583          	lw	a1,-36(s0)
    1778:	000027b7          	lui	a5,0x2
    177c:	d5c78513          	addi	a0,a5,-676 # 1d5c <BSS_END+0x1dc>
    1780:	e38ff0ef          	jal	ra,db8 <printf>
	printf("cause=%d\n",cause_code);
    1784:	fe842583          	lw	a1,-24(s0)
    1788:	000027b7          	lui	a5,0x2
    178c:	d6878513          	addi	a0,a5,-664 # 1d68 <BSS_END+0x1e8>
    1790:	e28ff0ef          	jal	ra,db8 <printf>
	if (cause & 0x80000000) {
    1794:	fd842783          	lw	a5,-40(s0)
    1798:	0807d463          	bgez	a5,1820 <trap_handler+0xe0>
		/* Asynchronous trap - interrupt */
		switch (cause_code) {
    179c:	fe842703          	lw	a4,-24(s0)
    17a0:	00b00793          	li	a5,11
    17a4:	08f70e63          	beq	a4,a5,1840 <trap_handler+0x100>
    17a8:	fe842703          	lw	a4,-24(s0)
    17ac:	00b00793          	li	a5,11
    17b0:	06e7e063          	bltu	a5,a4,1810 <trap_handler+0xd0>
    17b4:	fe842703          	lw	a4,-24(s0)
    17b8:	00300793          	li	a5,3
    17bc:	00f70a63          	beq	a4,a5,17d0 <trap_handler+0x90>
    17c0:	fe842703          	lw	a4,-24(s0)
    17c4:	00700793          	li	a5,7
    17c8:	00f70c63          	beq	a4,a5,17e0 <trap_handler+0xa0>
    17cc:	0440006f          	j	1810 <trap_handler+0xd0>
		case 3:
			uart_puts("software interruption!\n");
    17d0:	000027b7          	lui	a5,0x2
    17d4:	d7478513          	addi	a0,a5,-652 # 1d74 <BSS_END+0x1f4>
    17d8:	f9dfe0ef          	jal	ra,774 <uart_puts>
			break;
    17dc:	0680006f          	j	1844 <trap_handler+0x104>
		case 7:
			uart_puts("timer interruption!\n");
    17e0:	000027b7          	lui	a5,0x2
    17e4:	d8c78513          	addi	a0,a5,-628 # 1d8c <BSS_END+0x20c>
    17e8:	f8dfe0ef          	jal	ra,774 <uart_puts>
			printf("vector base=%08x, ISR addr=%08x\n", r_mtvec(), trap_vector);
    17ec:	efdff0ef          	jal	ra,16e8 <r_mtvec>
    17f0:	00050713          	mv	a4,a0
    17f4:	45000613          	li	a2,1104
    17f8:	00070593          	mv	a1,a4
    17fc:	000027b7          	lui	a5,0x2
    1800:	da478513          	addi	a0,a5,-604 # 1da4 <BSS_END+0x224>
    1804:	db4ff0ef          	jal	ra,db8 <printf>
			timer_handler();
    1808:	2f8000ef          	jal	ra,1b00 <timer_handler>
			break;
    180c:	0380006f          	j	1844 <trap_handler+0x104>
		case 11:
			break;
		default:
			uart_puts("unknown async exception!\n");
    1810:	000027b7          	lui	a5,0x2
    1814:	dc878513          	addi	a0,a5,-568 # 1dc8 <BSS_END+0x248>
    1818:	f5dfe0ef          	jal	ra,774 <uart_puts>
			break;
    181c:	0280006f          	j	1844 <trap_handler+0x104>
		}
	} else {
		/* Synchronous trap - exception */
		printf("Sync exceptions!, code = %d\n", cause_code);
    1820:	fe842583          	lw	a1,-24(s0)
    1824:	000027b7          	lui	a5,0x2
    1828:	de478513          	addi	a0,a5,-540 # 1de4 <BSS_END+0x264>
    182c:	d8cff0ef          	jal	ra,db8 <printf>
		panic("OOPS! What can I do!");
    1830:	000027b7          	lui	a5,0x2
    1834:	e0478513          	addi	a0,a5,-508 # 1e04 <BSS_END+0x284>
    1838:	df4ff0ef          	jal	ra,e2c <panic>
    183c:	0080006f          	j	1844 <trap_handler+0x104>
			break;
    1840:	00000013          	nop
		//return_pc += 4;
	}

	return return_pc;
    1844:	fec42783          	lw	a5,-20(s0)
}
    1848:	00078513          	mv	a0,a5
    184c:	02c12083          	lw	ra,44(sp)
    1850:	02812403          	lw	s0,40(sp)
    1854:	03010113          	addi	sp,sp,48
    1858:	00008067          	ret

0000185c <r_mhartid>:
{
    185c:	fe010113          	addi	sp,sp,-32
    1860:	00812e23          	sw	s0,28(sp)
    1864:	02010413          	addi	s0,sp,32
	asm volatile("csrr %0, mhartid" : "=r" (x) );
    1868:	f14027f3          	csrr	a5,mhartid
    186c:	fef42623          	sw	a5,-20(s0)
	return x;
    1870:	fec42783          	lw	a5,-20(s0)
}
    1874:	00078513          	mv	a0,a5
    1878:	01c12403          	lw	s0,28(sp)
    187c:	02010113          	addi	sp,sp,32
    1880:	00008067          	ret

00001884 <r_mstatus>:
{
    1884:	fe010113          	addi	sp,sp,-32
    1888:	00812e23          	sw	s0,28(sp)
    188c:	02010413          	addi	s0,sp,32
	asm volatile("csrr %0, mstatus" : "=r" (x) );
    1890:	300027f3          	csrr	a5,mstatus
    1894:	fef42623          	sw	a5,-20(s0)
	return x;
    1898:	fec42783          	lw	a5,-20(s0)
}
    189c:	00078513          	mv	a0,a5
    18a0:	01c12403          	lw	s0,28(sp)
    18a4:	02010113          	addi	sp,sp,32
    18a8:	00008067          	ret

000018ac <w_mstatus>:
{
    18ac:	fe010113          	addi	sp,sp,-32
    18b0:	00812e23          	sw	s0,28(sp)
    18b4:	02010413          	addi	s0,sp,32
    18b8:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mstatus, %0" : : "r" (x));
    18bc:	fec42783          	lw	a5,-20(s0)
    18c0:	30079073          	csrw	mstatus,a5
}
    18c4:	00000013          	nop
    18c8:	01c12403          	lw	s0,28(sp)
    18cc:	02010113          	addi	sp,sp,32
    18d0:	00008067          	ret

000018d4 <r_mie>:
#define MIE_MEIE (1 << 11) // external
#define MIE_MTIE (1 << 7)  // timer
#define MIE_MSIE (1 << 3)  // software

static inline reg_t r_mie()
{
    18d4:	fe010113          	addi	sp,sp,-32
    18d8:	00812e23          	sw	s0,28(sp)
    18dc:	02010413          	addi	s0,sp,32
	reg_t x;
	asm volatile("csrr %0, mie" : "=r" (x) );
    18e0:	304027f3          	csrr	a5,mie
    18e4:	fef42623          	sw	a5,-20(s0)
	return x;
    18e8:	fec42783          	lw	a5,-20(s0)
}
    18ec:	00078513          	mv	a0,a5
    18f0:	01c12403          	lw	s0,28(sp)
    18f4:	02010113          	addi	sp,sp,32
    18f8:	00008067          	ret

000018fc <w_mie>:

static inline void w_mie(reg_t x)
{
    18fc:	fe010113          	addi	sp,sp,-32
    1900:	00812e23          	sw	s0,28(sp)
    1904:	02010413          	addi	s0,sp,32
    1908:	fea42623          	sw	a0,-20(s0)
	asm volatile("csrw mie, %0" : : "r" (x));
    190c:	fec42783          	lw	a5,-20(s0)
    1910:	30479073          	csrw	mie,a5
}
    1914:	00000013          	nop
    1918:	01c12403          	lw	s0,28(sp)
    191c:	02010113          	addi	sp,sp,32
    1920:	00008067          	ret

00001924 <timer_load>:

static uint32_t _tick = 0;

/* load timer interval(in ticks) for next timer interrupt.*/
void timer_load(int interval)
{
    1924:	fb010113          	addi	sp,sp,-80
    1928:	04112623          	sw	ra,76(sp)
    192c:	04812423          	sw	s0,72(sp)
    1930:	05212223          	sw	s2,68(sp)
    1934:	05312023          	sw	s3,64(sp)
    1938:	03412e23          	sw	s4,60(sp)
    193c:	03512c23          	sw	s5,56(sp)
    1940:	03612a23          	sw	s6,52(sp)
    1944:	03712823          	sw	s7,48(sp)
    1948:	05010413          	addi	s0,sp,80
    194c:	faa42e23          	sw	a0,-68(s0)
	/* each CPU has a separate source of timer interrupts. */
	int id = r_mhartid();
    1950:	f0dff0ef          	jal	ra,185c <r_mhartid>
    1954:	00050793          	mv	a5,a0
    1958:	fcf42e23          	sw	a5,-36(s0)
	
	*(uint64_t*)CLINT_MTIMECMP(id) = *(uint64_t*)CLINT_MTIME + interval;
    195c:	0200c7b7          	lui	a5,0x200c
    1960:	ff878793          	addi	a5,a5,-8 # 200bff8 <_memory_end+0x1e0bff8>
    1964:	0007a703          	lw	a4,0(a5)
    1968:	0047a783          	lw	a5,4(a5)
    196c:	fbc42683          	lw	a3,-68(s0)
    1970:	00068913          	mv	s2,a3
    1974:	41f6d693          	srai	a3,a3,0x1f
    1978:	00068993          	mv	s3,a3
    197c:	fdc42603          	lw	a2,-36(s0)
    1980:	004016b7          	lui	a3,0x401
    1984:	80068693          	addi	a3,a3,-2048 # 400800 <_memory_end+0x200800>
    1988:	00d606b3          	add	a3,a2,a3
    198c:	00369693          	slli	a3,a3,0x3
    1990:	00068513          	mv	a0,a3
    1994:	01270633          	add	a2,a4,s2
    1998:	00060593          	mv	a1,a2
    199c:	00e5b5b3          	sltu	a1,a1,a4
    19a0:	013786b3          	add	a3,a5,s3
    19a4:	00d587b3          	add	a5,a1,a3
    19a8:	00078693          	mv	a3,a5
    19ac:	00060713          	mv	a4,a2
    19b0:	00068793          	mv	a5,a3
    19b4:	00e52023          	sw	a4,0(a0)
    19b8:	00f52223          	sw	a5,4(a0)
	unsigned int x0 = *(uint64_t*)CLINT_MTIMECMP(id); 
    19bc:	fdc42703          	lw	a4,-36(s0)
    19c0:	004017b7          	lui	a5,0x401
    19c4:	80078793          	addi	a5,a5,-2048 # 400800 <_memory_end+0x200800>
    19c8:	00f707b3          	add	a5,a4,a5
    19cc:	00379793          	slli	a5,a5,0x3
    19d0:	0007a703          	lw	a4,0(a5)
    19d4:	0047a783          	lw	a5,4(a5)
    19d8:	fce42c23          	sw	a4,-40(s0)
	unsigned int x1 = *(uint64_t*)CLINT_MTIMECMP(id) >> 32;
    19dc:	fdc42703          	lw	a4,-36(s0)
    19e0:	004017b7          	lui	a5,0x401
    19e4:	80078793          	addi	a5,a5,-2048 # 400800 <_memory_end+0x200800>
    19e8:	00f707b3          	add	a5,a4,a5
    19ec:	00379793          	slli	a5,a5,0x3
    19f0:	0007a703          	lw	a4,0(a5)
    19f4:	0047a783          	lw	a5,4(a5)
    19f8:	0007db13          	srli	s6,a5,0x0
    19fc:	00000b93          	li	s7,0
    1a00:	fd642a23          	sw	s6,-44(s0)
	unsigned int y0 =  *(uint64_t*)CLINT_MTIME;
    1a04:	0200c7b7          	lui	a5,0x200c
    1a08:	ff878793          	addi	a5,a5,-8 # 200bff8 <_memory_end+0x1e0bff8>
    1a0c:	0007a703          	lw	a4,0(a5)
    1a10:	0047a783          	lw	a5,4(a5)
    1a14:	fce42823          	sw	a4,-48(s0)
	unsigned int y1 = *(uint64_t*)CLINT_MTIME >> 32; 
    1a18:	0200c7b7          	lui	a5,0x200c
    1a1c:	ff878793          	addi	a5,a5,-8 # 200bff8 <_memory_end+0x1e0bff8>
    1a20:	0007a703          	lw	a4,0(a5)
    1a24:	0047a783          	lw	a5,4(a5)
    1a28:	0007da13          	srli	s4,a5,0x0
    1a2c:	00000a93          	li	s5,0
    1a30:	fd442623          	sw	s4,-52(s0)
	
	printf("mtimecmp=%p, value=%08x, %08x\n", CLINT_MTIMECMP(id), x1, x0);
    1a34:	fdc42703          	lw	a4,-36(s0)
    1a38:	004017b7          	lui	a5,0x401
    1a3c:	80078793          	addi	a5,a5,-2048 # 400800 <_memory_end+0x200800>
    1a40:	00f707b3          	add	a5,a4,a5
    1a44:	00379793          	slli	a5,a5,0x3
    1a48:	fd842683          	lw	a3,-40(s0)
    1a4c:	fd442603          	lw	a2,-44(s0)
    1a50:	00078593          	mv	a1,a5
    1a54:	000027b7          	lui	a5,0x2
    1a58:	e1c78513          	addi	a0,a5,-484 # 1e1c <BSS_END+0x29c>
    1a5c:	b5cff0ef          	jal	ra,db8 <printf>
	printf("mtime=%p, value=%08x, %08x\n", CLINT_MTIME, y1, y0);
    1a60:	fd042683          	lw	a3,-48(s0)
    1a64:	fcc42603          	lw	a2,-52(s0)
    1a68:	0200c7b7          	lui	a5,0x200c
    1a6c:	ff878593          	addi	a1,a5,-8 # 200bff8 <_memory_end+0x1e0bff8>
    1a70:	000027b7          	lui	a5,0x2
    1a74:	e3c78513          	addi	a0,a5,-452 # 1e3c <BSS_END+0x2bc>
    1a78:	b40ff0ef          	jal	ra,db8 <printf>
	//halt();
}
    1a7c:	00000013          	nop
    1a80:	04c12083          	lw	ra,76(sp)
    1a84:	04812403          	lw	s0,72(sp)
    1a88:	04412903          	lw	s2,68(sp)
    1a8c:	04012983          	lw	s3,64(sp)
    1a90:	03c12a03          	lw	s4,60(sp)
    1a94:	03812a83          	lw	s5,56(sp)
    1a98:	03412b03          	lw	s6,52(sp)
    1a9c:	03012b83          	lw	s7,48(sp)
    1aa0:	05010113          	addi	sp,sp,80
    1aa4:	00008067          	ret

00001aa8 <timer_init>:

void timer_init()
{
    1aa8:	ff010113          	addi	sp,sp,-16
    1aac:	00112623          	sw	ra,12(sp)
    1ab0:	00812423          	sw	s0,8(sp)
    1ab4:	01010413          	addi	s0,sp,16
	/*
	 * On reset, mtime is cleared to zero, but the mtimecmp registers 
	 * are not reset. So we have to init the mtimecmp manually.
	 */
	timer_load(TIMER_INTERVAL);
    1ab8:	000187b7          	lui	a5,0x18
    1abc:	6a078513          	addi	a0,a5,1696 # 186a0 <_bss_end+0x135c8>
    1ac0:	e65ff0ef          	jal	ra,1924 <timer_load>

	/* enable machine-mode timer interrupts. */
	w_mie(r_mie() | MIE_MTIE);
    1ac4:	e11ff0ef          	jal	ra,18d4 <r_mie>
    1ac8:	00050793          	mv	a5,a0
    1acc:	0807e793          	ori	a5,a5,128
    1ad0:	00078513          	mv	a0,a5
    1ad4:	e29ff0ef          	jal	ra,18fc <w_mie>

	/* enable machine-mode global interrupts. */
	w_mstatus(r_mstatus() | MSTATUS_MIE);
    1ad8:	dadff0ef          	jal	ra,1884 <r_mstatus>
    1adc:	00050793          	mv	a5,a0
    1ae0:	0087e793          	ori	a5,a5,8
    1ae4:	00078513          	mv	a0,a5
    1ae8:	dc5ff0ef          	jal	ra,18ac <w_mstatus>
}
    1aec:	00000013          	nop
    1af0:	00c12083          	lw	ra,12(sp)
    1af4:	00812403          	lw	s0,8(sp)
    1af8:	01010113          	addi	sp,sp,16
    1afc:	00008067          	ret

00001b00 <timer_handler>:

void timer_handler() 
{
    1b00:	ff010113          	addi	sp,sp,-16
    1b04:	00112623          	sw	ra,12(sp)
    1b08:	00812423          	sw	s0,8(sp)
    1b0c:	01010413          	addi	s0,sp,16
	_tick++;
    1b10:	000057b7          	lui	a5,0x5
    1b14:	0d47a783          	lw	a5,212(a5) # 50d4 <_tick>
    1b18:	00178713          	addi	a4,a5,1
    1b1c:	000057b7          	lui	a5,0x5
    1b20:	0ce7aa23          	sw	a4,212(a5) # 50d4 <_tick>
	printf("tick: %d\n", _tick);
    1b24:	000057b7          	lui	a5,0x5
    1b28:	0d47a783          	lw	a5,212(a5) # 50d4 <_tick>
    1b2c:	00078593          	mv	a1,a5
    1b30:	000027b7          	lui	a5,0x2
    1b34:	e5878513          	addi	a0,a5,-424 # 1e58 <BSS_END+0x2d8>
    1b38:	a80ff0ef          	jal	ra,db8 <printf>

	//halt();
	timer_load(TIMER_INTERVAL);
    1b3c:	000187b7          	lui	a5,0x18
    1b40:	6a078513          	addi	a0,a5,1696 # 186a0 <_bss_end+0x135c8>
    1b44:	de1ff0ef          	jal	ra,1924 <timer_load>
}
    1b48:	00000013          	nop
    1b4c:	00c12083          	lw	ra,12(sp)
    1b50:	00812403          	lw	s0,8(sp)
    1b54:	01010113          	addi	sp,sp,16
    1b58:	00008067          	ret
